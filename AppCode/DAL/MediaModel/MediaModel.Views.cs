//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(ProjectJKL.AppCode.DAL.MediaModel.MediaEntities),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets0049bb93e9ebf9fd8a25c3efc08cfc6e30a20b57c888cd8a0e3b9ced074e80c9))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets0049bb93e9ebf9fd8a25c3efc08cfc6e30a20b57c888cd8a0e3b9ced074e80c9 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "0049bb93e9ebf9fd8a25c3efc08cfc6e30a20b57c888cd8a0e3b9ced074e80c9"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "MediaModelStoreContainer.ME_BookCategories")
            {
                return GetView0();
            }

            if (extentName == "MediaModelStoreContainer.ME_Books")
            {
                return GetView1();
            }

            if (extentName == "MediaModelStoreContainer.ME_Chapters")
            {
                return GetView2();
            }

            if (extentName == "MediaEntities.ME_BookCategories")
            {
                return GetView3();
            }

            if (extentName == "MediaEntities.ME_Books")
            {
                return GetView4();
            }

            if (extentName == "MediaEntities.ME_Chapters")
            {
                return GetView5();
            }

            if (extentName == "MediaModelStoreContainer.ME_Clients")
            {
                return GetView6();
            }

            if (extentName == "MediaModelStoreContainer.ME_PortfolioCategories")
            {
                return GetView7();
            }

            if (extentName == "MediaModelStoreContainer.ME_Portfolios")
            {
                return GetView8();
            }

            if (extentName == "MediaModelStoreContainer.ME_ProjectCategories")
            {
                return GetView9();
            }

            if (extentName == "MediaEntities.ME_Clients")
            {
                return GetView10();
            }

            if (extentName == "MediaEntities.ME_PortfolioCategories")
            {
                return GetView11();
            }

            if (extentName == "MediaEntities.ME_Portfolios")
            {
                return GetView12();
            }

            if (extentName == "MediaEntities.ME_ProjectCategories")
            {
                return GetView13();
            }

            if (extentName == "MediaModelStoreContainer.ME_Subscriptions")
            {
                return GetView14();
            }

            if (extentName == "MediaEntities.ME_Subscriptions")
            {
                return GetView15();
            }

            if (extentName == "MediaModelStoreContainer.ME_Testimonials")
            {
                return GetView16();
            }

            if (extentName == "MediaEntities.ME_Testimonials")
            {
                return GetView17();
            }

            if (extentName == "MediaModelStoreContainer.ME_PostCategories")
            {
                return GetView18();
            }

            if (extentName == "MediaModelStoreContainer.ME_Posts")
            {
                return GetView19();
            }

            if (extentName == "MediaEntities.ME_PostCategories")
            {
                return GetView20();
            }

            if (extentName == "MediaEntities.ME_Posts")
            {
                return GetView21();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for MediaModelStoreContainer.ME_BookCategories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ME_BookCategories
        [MediaModel.Store.ME_BookCategories](T1.[ME_BookCategories.BookCategoryID], T1.[ME_BookCategories.Title], T1.[ME_BookCategories.Description], T1.[ME_BookCategories.Hide], T1.[ME_BookCategories.ImageID])
    FROM (
        SELECT
            T.BookCategoryID AS [ME_BookCategories.BookCategoryID],
            T.Title AS [ME_BookCategories.Title],
            T.Description AS [ME_BookCategories.Description],
            T.Hide AS [ME_BookCategories.Hide],
            T.ImageID AS [ME_BookCategories.ImageID],
            True AS _from0
        FROM MediaEntities.ME_BookCategories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MediaModelStoreContainer.ME_Books.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ME_Books
        [MediaModel.Store.ME_Books](T1.[ME_Books.BookID], T1.[ME_Books.Title], T1.[ME_Books.SubTitle], T1.[ME_Books.Username], T1.[ME_Books.WrittenOn], T1.[ME_Books.Hide], T1.[ME_Books.Tags], T1.[ME_Books.BookCategoryID], T1.[ME_Books.ImageID])
    FROM (
        SELECT
            T.BookID AS [ME_Books.BookID],
            T.Title AS [ME_Books.Title],
            T.SubTitle AS [ME_Books.SubTitle],
            T.Username AS [ME_Books.Username],
            T.WrittenOn AS [ME_Books.WrittenOn],
            T.Hide AS [ME_Books.Hide],
            T.Tags AS [ME_Books.Tags],
            T.BookCategoryID AS [ME_Books.BookCategoryID],
            T.ImageID AS [ME_Books.ImageID],
            True AS _from0
        FROM MediaEntities.ME_Books AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MediaModelStoreContainer.ME_Chapters.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ME_Chapters
        [MediaModel.Store.ME_Chapters](T1.[ME_Chapters.ChapterID], T1.[ME_Chapters.Title], T1.[ME_Chapters.SubTitle], T1.[ME_Chapters.Description], T1.[ME_Chapters.ChapterContent], T1.[ME_Chapters.BookID], T1.[ME_Chapters.Tags], T1.[ME_Chapters.Hide])
    FROM (
        SELECT
            T.ChapterID AS [ME_Chapters.ChapterID],
            T.Title AS [ME_Chapters.Title],
            T.SubTitle AS [ME_Chapters.SubTitle],
            T.Description AS [ME_Chapters.Description],
            T.ChapterContent AS [ME_Chapters.ChapterContent],
            T.BookID AS [ME_Chapters.BookID],
            T.Tags AS [ME_Chapters.Tags],
            T.Hide AS [ME_Chapters.Hide],
            True AS _from0
        FROM MediaEntities.ME_Chapters AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MediaEntities.ME_BookCategories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ME_BookCategories
        [MediaModel.ME_BookCategories](T1.[ME_BookCategories.BookCategoryID], T1.[ME_BookCategories.Title], T1.[ME_BookCategories.Description], T1.[ME_BookCategories.Hide], T1.[ME_BookCategories.ImageID])
    FROM (
        SELECT
            T.BookCategoryID AS [ME_BookCategories.BookCategoryID],
            T.Title AS [ME_BookCategories.Title],
            T.Description AS [ME_BookCategories.Description],
            T.Hide AS [ME_BookCategories.Hide],
            T.ImageID AS [ME_BookCategories.ImageID],
            True AS _from0
        FROM MediaModelStoreContainer.ME_BookCategories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MediaEntities.ME_Books.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ME_Books
        [MediaModel.ME_Books](T1.[ME_Books.BookID], T1.[ME_Books.Title], T1.[ME_Books.SubTitle], T1.[ME_Books.Username], T1.[ME_Books.WrittenOn], T1.[ME_Books.Hide], T1.[ME_Books.Tags], T1.[ME_Books.BookCategoryID], T1.[ME_Books.ImageID])
    FROM (
        SELECT
            T.BookID AS [ME_Books.BookID],
            T.Title AS [ME_Books.Title],
            T.SubTitle AS [ME_Books.SubTitle],
            T.Username AS [ME_Books.Username],
            T.WrittenOn AS [ME_Books.WrittenOn],
            T.Hide AS [ME_Books.Hide],
            T.Tags AS [ME_Books.Tags],
            T.BookCategoryID AS [ME_Books.BookCategoryID],
            T.ImageID AS [ME_Books.ImageID],
            True AS _from0
        FROM MediaModelStoreContainer.ME_Books AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MediaEntities.ME_Chapters.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ME_Chapters
        [MediaModel.ME_Chapters](T1.[ME_Chapters.ChapterID], T1.[ME_Chapters.Title], T1.[ME_Chapters.SubTitle], T1.[ME_Chapters.Description], T1.[ME_Chapters.ChapterContent], T1.[ME_Chapters.BookID], T1.[ME_Chapters.Tags], T1.[ME_Chapters.Hide])
    FROM (
        SELECT
            T.ChapterID AS [ME_Chapters.ChapterID],
            T.Title AS [ME_Chapters.Title],
            T.SubTitle AS [ME_Chapters.SubTitle],
            T.Description AS [ME_Chapters.Description],
            T.ChapterContent AS [ME_Chapters.ChapterContent],
            T.BookID AS [ME_Chapters.BookID],
            T.Tags AS [ME_Chapters.Tags],
            T.Hide AS [ME_Chapters.Hide],
            True AS _from0
        FROM MediaModelStoreContainer.ME_Chapters AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MediaModelStoreContainer.ME_Clients.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ME_Clients
        [MediaModel.Store.ME_Clients](T1.[ME_Clients.ClientID], T1.[ME_Clients.Title], T1.[ME_Clients.Description])
    FROM (
        SELECT
            T.ClientID AS [ME_Clients.ClientID],
            T.Title AS [ME_Clients.Title],
            T.Description AS [ME_Clients.Description],
            True AS _from0
        FROM MediaEntities.ME_Clients AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MediaModelStoreContainer.ME_PortfolioCategories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ME_PortfolioCategories
        [MediaModel.Store.ME_PortfolioCategories](T1.[ME_PortfolioCategories.PortfolioCategoryID], T1.[ME_PortfolioCategories.PortfolioID], T1.[ME_PortfolioCategories.ProjectCategoryID])
    FROM (
        SELECT
            T.PortfolioCategoryID AS [ME_PortfolioCategories.PortfolioCategoryID],
            T.PortfolioID AS [ME_PortfolioCategories.PortfolioID],
            T.ProjectCategoryID AS [ME_PortfolioCategories.ProjectCategoryID],
            True AS _from0
        FROM MediaEntities.ME_PortfolioCategories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MediaModelStoreContainer.ME_Portfolios.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ME_Portfolios
        [MediaModel.Store.ME_Portfolios](T1.[ME_Portfolios.PortfolioID], T1.[ME_Portfolios.Title], T1.[ME_Portfolios.ClientID], T1.[ME_Portfolios.Description], T1.[ME_Portfolios.Date], T1.[ME_Portfolios.URL], T1.[ME_Portfolios.ImageID])
    FROM (
        SELECT
            T.PortfolioID AS [ME_Portfolios.PortfolioID],
            T.Title AS [ME_Portfolios.Title],
            T.ClientID AS [ME_Portfolios.ClientID],
            T.Description AS [ME_Portfolios.Description],
            T.Date AS [ME_Portfolios.Date],
            T.URL AS [ME_Portfolios.URL],
            T.ImageID AS [ME_Portfolios.ImageID],
            True AS _from0
        FROM MediaEntities.ME_Portfolios AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MediaModelStoreContainer.ME_ProjectCategories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ME_ProjectCategories
        [MediaModel.Store.ME_ProjectCategories](T1.[ME_ProjectCategories.ProjectCategoryID], T1.[ME_ProjectCategories.Title], T1.[ME_ProjectCategories.Description])
    FROM (
        SELECT
            T.ProjectCategoryID AS [ME_ProjectCategories.ProjectCategoryID],
            T.Title AS [ME_ProjectCategories.Title],
            T.Description AS [ME_ProjectCategories.Description],
            True AS _from0
        FROM MediaEntities.ME_ProjectCategories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MediaEntities.ME_Clients.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ME_Clients
        [MediaModel.ME_Clients](T1.[ME_Clients.ClientID], T1.[ME_Clients.Title], T1.[ME_Clients.Description])
    FROM (
        SELECT
            T.ClientID AS [ME_Clients.ClientID],
            T.Title AS [ME_Clients.Title],
            T.Description AS [ME_Clients.Description],
            True AS _from0
        FROM MediaModelStoreContainer.ME_Clients AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MediaEntities.ME_PortfolioCategories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ME_PortfolioCategories
        [MediaModel.ME_PortfolioCategories](T1.[ME_PortfolioCategories.PortfolioCategoryID], T1.[ME_PortfolioCategories.PortfolioID], T1.[ME_PortfolioCategories.ProjectCategoryID])
    FROM (
        SELECT
            T.PortfolioCategoryID AS [ME_PortfolioCategories.PortfolioCategoryID],
            T.PortfolioID AS [ME_PortfolioCategories.PortfolioID],
            T.ProjectCategoryID AS [ME_PortfolioCategories.ProjectCategoryID],
            True AS _from0
        FROM MediaModelStoreContainer.ME_PortfolioCategories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MediaEntities.ME_Portfolios.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ME_Portfolios
        [MediaModel.ME_Portfolios](T1.[ME_Portfolios.PortfolioID], T1.[ME_Portfolios.Title], T1.[ME_Portfolios.ClientID], T1.[ME_Portfolios.Description], T1.[ME_Portfolios.Date], T1.[ME_Portfolios.URL], T1.[ME_Portfolios.ImageID])
    FROM (
        SELECT
            T.PortfolioID AS [ME_Portfolios.PortfolioID],
            T.Title AS [ME_Portfolios.Title],
            T.ClientID AS [ME_Portfolios.ClientID],
            T.Description AS [ME_Portfolios.Description],
            T.Date AS [ME_Portfolios.Date],
            T.URL AS [ME_Portfolios.URL],
            T.ImageID AS [ME_Portfolios.ImageID],
            True AS _from0
        FROM MediaModelStoreContainer.ME_Portfolios AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MediaEntities.ME_ProjectCategories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ME_ProjectCategories
        [MediaModel.ME_ProjectCategories](T1.[ME_ProjectCategories.ProjectCategoryID], T1.[ME_ProjectCategories.Title], T1.[ME_ProjectCategories.Description])
    FROM (
        SELECT
            T.ProjectCategoryID AS [ME_ProjectCategories.ProjectCategoryID],
            T.Title AS [ME_ProjectCategories.Title],
            T.Description AS [ME_ProjectCategories.Description],
            True AS _from0
        FROM MediaModelStoreContainer.ME_ProjectCategories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MediaModelStoreContainer.ME_Subscriptions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ME_Subscriptions
        [MediaModel.Store.ME_Subscriptions](T1.[ME_Subscriptions.Email], T1.[ME_Subscriptions.Name], T1.[ME_Subscriptions.Mobile], T1.[ME_Subscriptions.IsSubscribed])
    FROM (
        SELECT
            T.Email AS [ME_Subscriptions.Email],
            T.Name AS [ME_Subscriptions.Name],
            T.Mobile AS [ME_Subscriptions.Mobile],
            T.IsSubscribed AS [ME_Subscriptions.IsSubscribed],
            True AS _from0
        FROM MediaEntities.ME_Subscriptions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MediaEntities.ME_Subscriptions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ME_Subscriptions
        [MediaModel.ME_Subscriptions](T1.[ME_Subscriptions.Email], T1.[ME_Subscriptions.Name], T1.[ME_Subscriptions.Mobile], T1.[ME_Subscriptions.IsSubscribed])
    FROM (
        SELECT
            T.Email AS [ME_Subscriptions.Email],
            T.Name AS [ME_Subscriptions.Name],
            T.Mobile AS [ME_Subscriptions.Mobile],
            T.IsSubscribed AS [ME_Subscriptions.IsSubscribed],
            True AS _from0
        FROM MediaModelStoreContainer.ME_Subscriptions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MediaModelStoreContainer.ME_Testimonials.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ME_Testimonials
        [MediaModel.Store.ME_Testimonials](T1.[ME_Testimonials.TestimonialID], T1.[ME_Testimonials.Testimonial], T1.[ME_Testimonials.Name], T1.[ME_Testimonials.Company], T1.[ME_Testimonials.Position], T1.[ME_Testimonials.ImageID])
    FROM (
        SELECT
            T.TestimonialID AS [ME_Testimonials.TestimonialID],
            T.Testimonial AS [ME_Testimonials.Testimonial],
            T.Name AS [ME_Testimonials.Name],
            T.Company AS [ME_Testimonials.Company],
            T.Position AS [ME_Testimonials.Position],
            T.ImageID AS [ME_Testimonials.ImageID],
            True AS _from0
        FROM MediaEntities.ME_Testimonials AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MediaEntities.ME_Testimonials.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ME_Testimonials
        [MediaModel.ME_Testimonials](T1.[ME_Testimonials.TestimonialID], T1.[ME_Testimonials.Testimonial], T1.[ME_Testimonials.Name], T1.[ME_Testimonials.Company], T1.[ME_Testimonials.Position], T1.[ME_Testimonials.ImageID])
    FROM (
        SELECT
            T.TestimonialID AS [ME_Testimonials.TestimonialID],
            T.Testimonial AS [ME_Testimonials.Testimonial],
            T.Name AS [ME_Testimonials.Name],
            T.Company AS [ME_Testimonials.Company],
            T.Position AS [ME_Testimonials.Position],
            T.ImageID AS [ME_Testimonials.ImageID],
            True AS _from0
        FROM MediaModelStoreContainer.ME_Testimonials AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MediaModelStoreContainer.ME_PostCategories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ME_PostCategories
        [MediaModel.Store.ME_PostCategories](T1.[ME_PostCategories.PostCategoryID], T1.[ME_PostCategories.Title], T1.[ME_PostCategories.Description], T1.[ME_PostCategories.Hide], T1.[ME_PostCategories.ParentPostCategoryID], T1.[ME_PostCategories.ImageID], T1.[ME_PostCategories.Locale])
    FROM (
        SELECT
            T.PostCategoryID AS [ME_PostCategories.PostCategoryID],
            T.Title AS [ME_PostCategories.Title],
            T.Description AS [ME_PostCategories.Description],
            T.Hide AS [ME_PostCategories.Hide],
            T.ParentPostCategoryID AS [ME_PostCategories.ParentPostCategoryID],
            T.ImageID AS [ME_PostCategories.ImageID],
            T.Locale AS [ME_PostCategories.Locale],
            True AS _from0
        FROM MediaEntities.ME_PostCategories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MediaModelStoreContainer.ME_Posts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ME_Posts
        [MediaModel.Store.ME_Posts](T1.[ME_Posts.PostID], T1.[ME_Posts.Title], T1.[ME_Posts.SubTitle], T1.[ME_Posts.PostContent], T1.[ME_Posts.Tags], T1.[ME_Posts.AddedOn], T1.[ME_Posts.Username], T1.[ME_Posts.Hide], T1.[ME_Posts.PostCategoryID], T1.[ME_Posts.ParentPostID], T1.[ME_Posts.ImageID], T1.[ME_Posts.Locale])
    FROM (
        SELECT
            T.PostID AS [ME_Posts.PostID],
            T.Title AS [ME_Posts.Title],
            T.SubTitle AS [ME_Posts.SubTitle],
            T.PostContent AS [ME_Posts.PostContent],
            T.Tags AS [ME_Posts.Tags],
            T.AddedOn AS [ME_Posts.AddedOn],
            T.Username AS [ME_Posts.Username],
            T.Hide AS [ME_Posts.Hide],
            T.PostCategoryID AS [ME_Posts.PostCategoryID],
            T.ParentPostID AS [ME_Posts.ParentPostID],
            T.ImageID AS [ME_Posts.ImageID],
            T.Locale AS [ME_Posts.Locale],
            True AS _from0
        FROM MediaEntities.ME_Posts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MediaEntities.ME_PostCategories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ME_PostCategories
        [MediaModel.ME_PostCategories](T1.[ME_PostCategories.PostCategoryID], T1.[ME_PostCategories.Title], T1.[ME_PostCategories.Description], T1.[ME_PostCategories.Hide], T1.[ME_PostCategories.ParentPostCategoryID], T1.[ME_PostCategories.ImageID], T1.[ME_PostCategories.Locale])
    FROM (
        SELECT
            T.PostCategoryID AS [ME_PostCategories.PostCategoryID],
            T.Title AS [ME_PostCategories.Title],
            T.Description AS [ME_PostCategories.Description],
            T.Hide AS [ME_PostCategories.Hide],
            T.ParentPostCategoryID AS [ME_PostCategories.ParentPostCategoryID],
            T.ImageID AS [ME_PostCategories.ImageID],
            T.Locale AS [ME_PostCategories.Locale],
            True AS _from0
        FROM MediaModelStoreContainer.ME_PostCategories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for MediaEntities.ME_Posts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ME_Posts
        [MediaModel.ME_Posts](T1.[ME_Posts.PostID], T1.[ME_Posts.Title], T1.[ME_Posts.SubTitle], T1.[ME_Posts.PostContent], T1.[ME_Posts.Tags], T1.[ME_Posts.AddedOn], T1.[ME_Posts.Username], T1.[ME_Posts.Hide], T1.[ME_Posts.PostCategoryID], T1.[ME_Posts.ParentPostID], T1.[ME_Posts.ImageID], T1.[ME_Posts.Locale])
    FROM (
        SELECT
            T.PostID AS [ME_Posts.PostID],
            T.Title AS [ME_Posts.Title],
            T.SubTitle AS [ME_Posts.SubTitle],
            T.PostContent AS [ME_Posts.PostContent],
            T.Tags AS [ME_Posts.Tags],
            T.AddedOn AS [ME_Posts.AddedOn],
            T.Username AS [ME_Posts.Username],
            T.Hide AS [ME_Posts.Hide],
            T.PostCategoryID AS [ME_Posts.PostCategoryID],
            T.ParentPostID AS [ME_Posts.ParentPostID],
            T.ImageID AS [ME_Posts.ImageID],
            T.Locale AS [ME_Posts.Locale],
            True AS _from0
        FROM MediaModelStoreContainer.ME_Posts AS T
    ) AS T1");
        }
    }
}