//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(ProjectJKL.AppCode.DAL.ShoppingCartModel.ShoppingCartEntities),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets22cc62eb0dcb69e915b76e7375993f2532c33f119a48e70414f9d5a196b274e3))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets22cc62eb0dcb69e915b76e7375993f2532c33f119a48e70414f9d5a196b274e3 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get
            {
                return "22cc62eb0dcb69e915b76e7375993f2532c33f119a48e70414f9d5a196b274e3";
            }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "ShoppingCartModelStoreContainer.MS_UserAdresses")
            {
                return GetView0();
            }

            if (extentName == "ShoppingCartModelStoreContainer.MS_UserCategories")
            {
                return GetView1();
            }

            if (extentName == "ShoppingCartModelStoreContainer.MS_Users")
            {
                return GetView2();
            }

            if (extentName == "ShoppingCartModelStoreContainer.MS_UsersData")
            {
                return GetView3();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_AvailabilityTypes")
            {
                return GetView4();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_Brands")
            {
                return GetView5();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_CardTypes")
            {
                return GetView6();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_Categories")
            {
                return GetView7();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_Colors")
            {
                return GetView8();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_CouponProducts")
            {
                return GetView9();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_Coupons")
            {
                return GetView10();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_DiscountRanges")
            {
                return GetView11();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_DiscountRules")
            {
                return GetView12();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_GuestOrders")
            {
                return GetView13();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_Highlights")
            {
                return GetView14();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_Icons")
            {
                return GetView15();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_OrderDetails")
            {
                return GetView16();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_Orders")
            {
                return GetView17();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_ProductDownloads")
            {
                return GetView18();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_ProductIcons")
            {
                return GetView19();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_ProductImages")
            {
                return GetView20();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_ProductLocks")
            {
                return GetView21();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_ProductModels")
            {
                return GetView22();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_Products")
            {
                return GetView23();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_ProductTypes")
            {
                return GetView24();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_ProductVideos")
            {
                return GetView25();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_Ratings")
            {
                return GetView26();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_Reviews")
            {
                return GetView27();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_Sections")
            {
                return GetView28();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_ShipmentCompanies")
            {
                return GetView29();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_ShipmentTypes")
            {
                return GetView30();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_Sizes")
            {
                return GetView31();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_SubCategories")
            {
                return GetView32();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_TempCart")
            {
                return GetView33();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_Trackings")
            {
                return GetView34();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_Units")
            {
                return GetView35();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_UserCardDetails")
            {
                return GetView36();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_UserCart")
            {
                return GetView37();
            }

            if (extentName == "ShoppingCartModelStoreContainer.SC_UserOrders")
            {
                return GetView38();
            }

            if (extentName == "ShoppingCartEntities.SC_UserAdresses")
            {
                return GetView39();
            }

            if (extentName == "ShoppingCartEntities.SC_UserCategories")
            {
                return GetView40();
            }

            if (extentName == "ShoppingCartEntities.SC_Users")
            {
                return GetView41();
            }

            if (extentName == "ShoppingCartEntities.SC_UsersData")
            {
                return GetView42();
            }

            if (extentName == "ShoppingCartEntities.SC_AvailabilityTypes")
            {
                return GetView43();
            }

            if (extentName == "ShoppingCartEntities.SC_Brands")
            {
                return GetView44();
            }

            if (extentName == "ShoppingCartEntities.SC_CardTypes")
            {
                return GetView45();
            }

            if (extentName == "ShoppingCartEntities.SC_Categories")
            {
                return GetView46();
            }

            if (extentName == "ShoppingCartEntities.SC_Colors")
            {
                return GetView47();
            }

            if (extentName == "ShoppingCartEntities.SC_CouponProducts")
            {
                return GetView48();
            }

            if (extentName == "ShoppingCartEntities.SC_Coupons")
            {
                return GetView49();
            }

            if (extentName == "ShoppingCartEntities.SC_DiscountRanges")
            {
                return GetView50();
            }

            if (extentName == "ShoppingCartEntities.SC_DiscountRules")
            {
                return GetView51();
            }

            if (extentName == "ShoppingCartEntities.SC_GuestOrders")
            {
                return GetView52();
            }

            if (extentName == "ShoppingCartEntities.SC_Highlights")
            {
                return GetView53();
            }

            if (extentName == "ShoppingCartEntities.SC_Icons")
            {
                return GetView54();
            }

            if (extentName == "ShoppingCartEntities.SC_OrderDetails")
            {
                return GetView55();
            }

            if (extentName == "ShoppingCartEntities.SC_Orders")
            {
                return GetView56();
            }

            if (extentName == "ShoppingCartEntities.SC_ProductDownloads")
            {
                return GetView57();
            }

            if (extentName == "ShoppingCartEntities.SC_ProductIcons")
            {
                return GetView58();
            }

            if (extentName == "ShoppingCartEntities.SC_ProductImages")
            {
                return GetView59();
            }

            if (extentName == "ShoppingCartEntities.SC_ProductLocks")
            {
                return GetView60();
            }

            if (extentName == "ShoppingCartEntities.SC_ProductModels")
            {
                return GetView61();
            }

            if (extentName == "ShoppingCartEntities.SC_Products")
            {
                return GetView62();
            }

            if (extentName == "ShoppingCartEntities.SC_ProductTypes")
            {
                return GetView63();
            }

            if (extentName == "ShoppingCartEntities.SC_ProductVideos")
            {
                return GetView64();
            }

            if (extentName == "ShoppingCartEntities.SC_Ratings")
            {
                return GetView65();
            }

            if (extentName == "ShoppingCartEntities.SC_Reviews")
            {
                return GetView66();
            }

            if (extentName == "ShoppingCartEntities.SC_Sections")
            {
                return GetView67();
            }

            if (extentName == "ShoppingCartEntities.SC_ShipmentCompanies")
            {
                return GetView68();
            }

            if (extentName == "ShoppingCartEntities.SC_ShipmentTypes")
            {
                return GetView69();
            }

            if (extentName == "ShoppingCartEntities.SC_Sizes")
            {
                return GetView70();
            }

            if (extentName == "ShoppingCartEntities.SC_SubCategories")
            {
                return GetView71();
            }

            if (extentName == "ShoppingCartEntities.SC_TempCart")
            {
                return GetView72();
            }

            if (extentName == "ShoppingCartEntities.SC_Trackings")
            {
                return GetView73();
            }

            if (extentName == "ShoppingCartEntities.SC_Units")
            {
                return GetView74();
            }

            if (extentName == "ShoppingCartEntities.SC_UserCardDetails")
            {
                return GetView75();
            }

            if (extentName == "ShoppingCartEntities.SC_UserCart")
            {
                return GetView76();
            }

            if (extentName == "ShoppingCartEntities.SC_UserOrders")
            {
                return GetView77();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.MS_UserAdresses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MS_UserAdresses
        [ShoppingCartModel.Store.MS_UserAdresses](T1.[MS_UserAdresses.AddressID], T1.[MS_UserAdresses.Username], T1.[MS_UserAdresses.AddressCategory], T1.[MS_UserAdresses.StreetName], T1.[MS_UserAdresses.City], T1.[MS_UserAdresses.ZipCode], T1.[MS_UserAdresses.State], T1.[MS_UserAdresses.Country], T1.[MS_UserAdresses.Hide])
    FROM (
        SELECT
            T.AddressID AS [MS_UserAdresses.AddressID],
            T.Username AS [MS_UserAdresses.Username],
            T.AddressCategory AS [MS_UserAdresses.AddressCategory],
            T.StreetName AS [MS_UserAdresses.StreetName],
            T.City AS [MS_UserAdresses.City],
            T.ZipCode AS [MS_UserAdresses.ZipCode],
            T.State AS [MS_UserAdresses.State],
            T.Country AS [MS_UserAdresses.Country],
            T.Hide AS [MS_UserAdresses.Hide],
            True AS _from0
        FROM ShoppingCartEntities.SC_UserAdresses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.MS_UserCategories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MS_UserCategories
        [ShoppingCartModel.Store.MS_UserCategories](T1.[MS_UserCategories.UserCategoryID], T1.[MS_UserCategories.Title], T1.[MS_UserCategories.Description], T1.[MS_UserCategories.Hide])
    FROM (
        SELECT
            T.UserCategoryID AS [MS_UserCategories.UserCategoryID],
            T.Title AS [MS_UserCategories.Title],
            T.Description AS [MS_UserCategories.Description],
            T.Hide AS [MS_UserCategories.Hide],
            True AS _from0
        FROM ShoppingCartEntities.SC_UserCategories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.MS_Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MS_Users
        [ShoppingCartModel.Store.MS_Users](T1.[MS_Users.Username], T1.[MS_Users.Name], T1.[MS_Users.Email], T1.[MS_Users.ProfilePic], T1.[MS_Users.SecurityQuestion], T1.[MS_Users.SecurityAnswer], T1.[MS_Users.DateOfBirth], T1.[MS_Users.Gender], T1.[MS_Users.UserRole], T1.[MS_Users.UserCategoryID], T1.[MS_Users.Hide])
    FROM (
        SELECT
            T.Username AS [MS_Users.Username],
            T.Name AS [MS_Users.Name],
            T.Email AS [MS_Users.Email],
            T.ProfilePic AS [MS_Users.ProfilePic],
            T.SecurityQuestion AS [MS_Users.SecurityQuestion],
            T.SecurityAnswer AS [MS_Users.SecurityAnswer],
            T.DateOfBirth AS [MS_Users.DateOfBirth],
            T.Gender AS [MS_Users.Gender],
            T.UserRole AS [MS_Users.UserRole],
            T.UserCategoryID AS [MS_Users.UserCategoryID],
            T.Hide AS [MS_Users.Hide],
            True AS _from0
        FROM ShoppingCartEntities.SC_Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.MS_UsersData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MS_UsersData
        [ShoppingCartModel.Store.MS_UsersData](T1.[MS_UsersData.UserDataID], T1.[MS_UsersData.Username], T1.[MS_UsersData.UsersDataCategory], T1.[MS_UsersData.UserData], T1.[MS_UsersData.Hide])
    FROM (
        SELECT
            T.UserDataID AS [MS_UsersData.UserDataID],
            T.Username AS [MS_UsersData.Username],
            T.UsersDataCategory AS [MS_UsersData.UsersDataCategory],
            T.UserData AS [MS_UsersData.UserData],
            T.Hide AS [MS_UsersData.Hide],
            True AS _from0
        FROM ShoppingCartEntities.SC_UsersData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_AvailabilityTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_AvailabilityTypes
        [ShoppingCartModel.Store.SC_AvailabilityTypes](T1.[SC_AvailabilityTypes.AvailabilityTypeID], T1.[SC_AvailabilityTypes.Title], T1.[SC_AvailabilityTypes.Description], T1.[SC_AvailabilityTypes.Hide], T1.[SC_AvailabilityTypes.ColorName])
    FROM (
        SELECT
            T.AvailabilityTypeID AS [SC_AvailabilityTypes.AvailabilityTypeID],
            T.Title AS [SC_AvailabilityTypes.Title],
            T.Description AS [SC_AvailabilityTypes.Description],
            T.Hide AS [SC_AvailabilityTypes.Hide],
            T.ColorName AS [SC_AvailabilityTypes.ColorName],
            True AS _from0
        FROM ShoppingCartEntities.SC_AvailabilityTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_Brands.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Brands
        [ShoppingCartModel.Store.SC_Brands](T1.[SC_Brands.BrandID], T1.[SC_Brands.Title], T1.[SC_Brands.Description], T1.[SC_Brands.ImageURL], T1.[SC_Brands.Hide])
    FROM (
        SELECT
            T.BrandID AS [SC_Brands.BrandID],
            T.Title AS [SC_Brands.Title],
            T.Description AS [SC_Brands.Description],
            T.ImageURL AS [SC_Brands.ImageURL],
            T.Hide AS [SC_Brands.Hide],
            True AS _from0
        FROM ShoppingCartEntities.SC_Brands AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_CardTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_CardTypes
        [ShoppingCartModel.Store.SC_CardTypes](T1.[SC_CardTypes.CardTypeID], T1.[SC_CardTypes.Title], T1.[SC_CardTypes.Description], T1.[SC_CardTypes.Hide])
    FROM (
        SELECT
            T.CardTypeID AS [SC_CardTypes.CardTypeID],
            T.Title AS [SC_CardTypes.Title],
            T.Description AS [SC_CardTypes.Description],
            T.Hide AS [SC_CardTypes.Hide],
            True AS _from0
        FROM ShoppingCartEntities.SC_CardTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_Categories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Categories
        [ShoppingCartModel.Store.SC_Categories](T1.[SC_Categories.CategoryID], T1.[SC_Categories.Title], T1.[SC_Categories.Description], T1.[SC_Categories.ImageURL], T1.[SC_Categories.ImageThumbURL], T1.[SC_Categories.AlternateText], T1.[SC_Categories.Hide], T1.[SC_Categories.SectionID])
    FROM (
        SELECT
            T.CategoryID AS [SC_Categories.CategoryID],
            T.Title AS [SC_Categories.Title],
            T.Description AS [SC_Categories.Description],
            T.ImageURL AS [SC_Categories.ImageURL],
            T.ImageThumbURL AS [SC_Categories.ImageThumbURL],
            T.AlternateText AS [SC_Categories.AlternateText],
            T.Hide AS [SC_Categories.Hide],
            T.SectionID AS [SC_Categories.SectionID],
            True AS _from0
        FROM ShoppingCartEntities.SC_Categories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_Colors.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Colors
        [ShoppingCartModel.Store.SC_Colors](T1.[SC_Colors.ColorID], T1.[SC_Colors.Title], T1.[SC_Colors.Name], T1.[SC_Colors.Hex], T1.[SC_Colors.SectionID], T1.[SC_Colors.CategoryID], T1.[SC_Colors.SubCategoryID], T1.[SC_Colors.ImageURL])
    FROM (
        SELECT
            T.ColorID AS [SC_Colors.ColorID],
            T.Title AS [SC_Colors.Title],
            T.Name AS [SC_Colors.Name],
            T.Hex AS [SC_Colors.Hex],
            T.SectionID AS [SC_Colors.SectionID],
            T.CategoryID AS [SC_Colors.CategoryID],
            T.SubCategoryID AS [SC_Colors.SubCategoryID],
            T.ImageURL AS [SC_Colors.ImageURL],
            True AS _from0
        FROM ShoppingCartEntities.SC_Colors AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_CouponProducts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_CouponProducts
        [ShoppingCartModel.Store.SC_CouponProducts](T1.[SC_CouponProducts.CouponProductsID], T1.[SC_CouponProducts.CouponID], T1.[SC_CouponProducts.ProductID], T1.[SC_CouponProducts.AntiCouponProductID])
    FROM (
        SELECT
            T.CouponProductsID AS [SC_CouponProducts.CouponProductsID],
            T.CouponID AS [SC_CouponProducts.CouponID],
            T.ProductID AS [SC_CouponProducts.ProductID],
            T.AntiCouponProductID AS [SC_CouponProducts.AntiCouponProductID],
            True AS _from0
        FROM ShoppingCartEntities.SC_CouponProducts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_Coupons.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Coupons
        [ShoppingCartModel.Store.SC_Coupons](T1.[SC_Coupons.CouponID], T1.[SC_Coupons.Title], T1.[SC_Coupons.Description], T1.[SC_Coupons.Code], T1.[SC_Coupons.DiscountAmountOnTotal], T1.[SC_Coupons.DiscountPercentageOnTotal], T1.[SC_Coupons.DiscountAmountOnEach], T1.[SC_Coupons.DiscountPercentageOnEach], T1.[SC_Coupons.DiscountAmountOnShipping], T1.[SC_Coupons.DiscountPercentageOnShipping], T1.[SC_Coupons.FreeShipping], T1.[SC_Coupons.MinCartAmount], T1.[SC_Coupons.CouponUseCount], T1.[SC_Coupons.CouponUseCountPerCustomer], T1.[SC_Coupons.IsEnabled], T1.[SC_Coupons.ExpiresOn], T1.[SC_Coupons.SectionID], T1.[SC_Coupons.CategoryID], T1.[SC_Coupons.SubCategoryID], T1.[SC_Coupons.BrandID])
    FROM (
        SELECT
            T.CouponID AS [SC_Coupons.CouponID],
            T.Title AS [SC_Coupons.Title],
            T.Description AS [SC_Coupons.Description],
            T.Code AS [SC_Coupons.Code],
            T.DiscountAmountOnTotal AS [SC_Coupons.DiscountAmountOnTotal],
            T.DiscountPercentageOnTotal AS [SC_Coupons.DiscountPercentageOnTotal],
            T.DiscountAmountOnEach AS [SC_Coupons.DiscountAmountOnEach],
            T.DiscountPercentageOnEach AS [SC_Coupons.DiscountPercentageOnEach],
            T.DiscountAmountOnShipping AS [SC_Coupons.DiscountAmountOnShipping],
            T.DiscountPercentageOnShipping AS [SC_Coupons.DiscountPercentageOnShipping],
            T.FreeShipping AS [SC_Coupons.FreeShipping],
            T.MinCartAmount AS [SC_Coupons.MinCartAmount],
            T.CouponUseCount AS [SC_Coupons.CouponUseCount],
            T.CouponUseCountPerCustomer AS [SC_Coupons.CouponUseCountPerCustomer],
            T.IsEnabled AS [SC_Coupons.IsEnabled],
            T.ExpiresOn AS [SC_Coupons.ExpiresOn],
            T.SectionID AS [SC_Coupons.SectionID],
            T.CategoryID AS [SC_Coupons.CategoryID],
            T.SubCategoryID AS [SC_Coupons.SubCategoryID],
            T.BrandID AS [SC_Coupons.BrandID],
            True AS _from0
        FROM ShoppingCartEntities.SC_Coupons AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_DiscountRanges.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_DiscountRanges
        [ShoppingCartModel.Store.SC_DiscountRanges](T1.[SC_DiscountRanges.DiscountRangeID], T1.[SC_DiscountRanges.LowerRange], T1.[SC_DiscountRanges.UpperRange], T1.[SC_DiscountRanges.ProductID], T1.[SC_DiscountRanges.DiscountPercentage], T1.[SC_DiscountRanges.DiscountAmount], T1.[SC_DiscountRanges.FixedPrice])
    FROM (
        SELECT
            T.DiscountRangeID AS [SC_DiscountRanges.DiscountRangeID],
            T.LowerRange AS [SC_DiscountRanges.LowerRange],
            T.UpperRange AS [SC_DiscountRanges.UpperRange],
            T.ProductID AS [SC_DiscountRanges.ProductID],
            T.DiscountPercentage AS [SC_DiscountRanges.DiscountPercentage],
            T.DiscountAmount AS [SC_DiscountRanges.DiscountAmount],
            T.FixedPrice AS [SC_DiscountRanges.FixedPrice],
            True AS _from0
        FROM ShoppingCartEntities.SC_DiscountRanges AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_DiscountRules.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_DiscountRules
        [ShoppingCartModel.Store.SC_DiscountRules](T1.[SC_DiscountRules.DiscountRuleID], T1.[SC_DiscountRules.Title], T1.[SC_DiscountRules.Description], T1.[SC_DiscountRules.IsEnabled], T1.[SC_DiscountRules.IsExpirable], T1.[SC_DiscountRules.ExpiresOn], T1.[SC_DiscountRules.ExpiresAfterUses], T1.[SC_DiscountRules.ExpiresAfterDays], T1.[SC_DiscountRules.ProductQuantityOnToShipFree], T1.[SC_DiscountRules.ProductQuantityOnToShipFreeProductID], T1.[SC_DiscountRules.CartAmountOnToShipFree], T1.[SC_DiscountRules.CartDiscountOnTotalAmount], T1.[SC_DiscountRules.CartDiscountAmount], T1.[SC_DiscountRules.CartDiscountPercentage], T1.[SC_DiscountRules.DiscountPercentageForRepeatCustomer], T1.[SC_DiscountRules.DiscountAmountForRepeatCustomer], T1.[SC_DiscountRules.CustomerPurchaseRepeatCount], T1.[SC_DiscountRules.BuyThisCount], T1.[SC_DiscountRules.GetThisCount], T1.[SC_DiscountRules.GetThatCount], T1.[SC_DiscountRules.BuyThisProductID], T1.[SC_DiscountRules.GetThisProductID], T1.[SC_DiscountRules.DiscountOnSectionID], T1.[SC_DiscountRules.DiscountOnCategoryID], T1.[SC_DiscountRules.DiscountOnSubCategoryID], T1.[SC_DiscountRules.DiscountOnBrandID], T1.[SC_DiscountRules.DiscountPercentageOnSecCatSubBrand])
    FROM (
        SELECT
            T.DiscountRuleID AS [SC_DiscountRules.DiscountRuleID],
            T.Title AS [SC_DiscountRules.Title],
            T.Description AS [SC_DiscountRules.Description],
            T.IsEnabled AS [SC_DiscountRules.IsEnabled],
            T.IsExpirable AS [SC_DiscountRules.IsExpirable],
            T.ExpiresOn AS [SC_DiscountRules.ExpiresOn],
            T.ExpiresAfterUses AS [SC_DiscountRules.ExpiresAfterUses],
            T.ExpiresAfterDays AS [SC_DiscountRules.ExpiresAfterDays],
            T.ProductQuantityOnToShipFree AS [SC_DiscountRules.ProductQuantityOnToShipFree],
            T.ProductQuantityOnToShipFreeProductID AS [SC_DiscountRules.ProductQuantityOnToShipFreeProductID],
            T.CartAmountOnToShipFree AS [SC_DiscountRules.CartAmountOnToShipFree],
            T.CartDiscountOnTotalAmount AS [SC_DiscountRules.CartDiscountOnTotalAmount],
            T.CartDiscountAmount AS [SC_DiscountRules.CartDiscountAmount],
            T.CartDiscountPercentage AS [SC_DiscountRules.CartDiscountPercentage],
            T.DiscountPercentageForRepeatCustomer AS [SC_DiscountRules.DiscountPercentageForRepeatCustomer],
            T.DiscountAmountForRepeatCustomer AS [SC_DiscountRules.DiscountAmountForRepeatCustomer],
            T.CustomerPurchaseRepeatCount AS [SC_DiscountRules.CustomerPurchaseRepeatCount],
            T.BuyThisCount AS [SC_DiscountRules.BuyThisCount],
            T.GetThisCount AS [SC_DiscountRules.GetThisCount],
            T.GetThatCount AS [SC_DiscountRules.GetThatCount],
            T.BuyThisProductID AS [SC_DiscountRules.BuyThisProductID],
            T.GetThisProductID AS [SC_DiscountRules.GetThisProductID],
            T.DiscountOnSectionID AS [SC_DiscountRules.DiscountOnSectionID],
            T.DiscountOnCategoryID AS [SC_DiscountRules.DiscountOnCategoryID],
            T.DiscountOnSubCategoryID AS [SC_DiscountRules.DiscountOnSubCategoryID],
            T.DiscountOnBrandID AS [SC_DiscountRules.DiscountOnBrandID],
            T.DiscountPercentageOnSecCatSubBrand AS [SC_DiscountRules.DiscountPercentageOnSecCatSubBrand],
            True AS _from0
        FROM ShoppingCartEntities.SC_DiscountRules AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_GuestOrders.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_GuestOrders
        [ShoppingCartModel.Store.SC_GuestOrders](T1.[SC_GuestOrders.GuestOrderID], T1.[SC_GuestOrders.EmailID], T1.[SC_GuestOrders.Mobile], T1.[SC_GuestOrders.OrderNumber])
    FROM (
        SELECT
            T.GuestOrderID AS [SC_GuestOrders.GuestOrderID],
            T.EmailID AS [SC_GuestOrders.EmailID],
            T.Mobile AS [SC_GuestOrders.Mobile],
            T.OrderNumber AS [SC_GuestOrders.OrderNumber],
            True AS _from0
        FROM ShoppingCartEntities.SC_GuestOrders AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_Highlights.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Highlights
        [ShoppingCartModel.Store.SC_Highlights](T1.[SC_Highlights.HighlightID], T1.[SC_Highlights.ProductID], T1.[SC_Highlights.Highlight])
    FROM (
        SELECT
            T.HighlightID AS [SC_Highlights.HighlightID],
            T.ProductID AS [SC_Highlights.ProductID],
            T.Highlight AS [SC_Highlights.Highlight],
            True AS _from0
        FROM ShoppingCartEntities.SC_Highlights AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_Icons.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Icons
        [ShoppingCartModel.Store.SC_Icons](T1.[SC_Icons.IconID], T1.[SC_Icons.Title], T1.[SC_Icons.IconURL], T1.[SC_Icons.Description], T1.[SC_Icons.AlternateText])
    FROM (
        SELECT
            T.IconID AS [SC_Icons.IconID],
            T.Title AS [SC_Icons.Title],
            T.IconURL AS [SC_Icons.IconURL],
            T.Description AS [SC_Icons.Description],
            T.AlternateText AS [SC_Icons.AlternateText],
            True AS _from0
        FROM ShoppingCartEntities.SC_Icons AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_OrderDetails.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_OrderDetails
        [ShoppingCartModel.Store.SC_OrderDetails](T1.[SC_OrderDetails.OrderDetailID], T1.[SC_OrderDetails.OrderNumber], T1.[SC_OrderDetails.ProductID], T1.[SC_OrderDetails.Price], T1.[SC_OrderDetails.Quantity], T1.[SC_OrderDetails.ShipmentDate], T1.[SC_OrderDetails.DeliveryDate], T1.[SC_OrderDetails.ShipmentCompanyID], T1.[SC_OrderDetails.TrackingID])
    FROM (
        SELECT
            T.OrderDetailID AS [SC_OrderDetails.OrderDetailID],
            T.OrderNumber AS [SC_OrderDetails.OrderNumber],
            T.ProductID AS [SC_OrderDetails.ProductID],
            T.Price AS [SC_OrderDetails.Price],
            T.Quantity AS [SC_OrderDetails.Quantity],
            T.ShipmentDate AS [SC_OrderDetails.ShipmentDate],
            T.DeliveryDate AS [SC_OrderDetails.DeliveryDate],
            T.ShipmentCompanyID AS [SC_OrderDetails.ShipmentCompanyID],
            T.TrackingID AS [SC_OrderDetails.TrackingID],
            True AS _from0
        FROM ShoppingCartEntities.SC_OrderDetails AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_Orders.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Orders
        [ShoppingCartModel.Store.SC_Orders](T1.[SC_Orders.OrderNumber], T1.[SC_Orders.DateTime], T1.[SC_Orders.ShippingAddress], T1.[SC_Orders.BillingAddress], T1.[SC_Orders.EmailID], T1.[SC_Orders.Mobile], T1.[SC_Orders.ShipmentTypeID], T1.[SC_Orders.OrderTotal], T1.[SC_Orders.ShipmentCost], T1.[SC_Orders.IsConfirmed], T1.[SC_Orders.IsCancelled], T1.[SC_Orders.IsCompleted], T1.[SC_Orders.IsPaid], T1.[SC_Orders.IsFailed], T1.[SC_Orders.IsRefund], T1.[SC_Orders.IsDispatched], T1.[SC_Orders.IsReturned], T1.[SC_Orders.ReceiptHTML])
    FROM (
        SELECT
            T.OrderNumber AS [SC_Orders.OrderNumber],
            T.DateTime AS [SC_Orders.DateTime],
            T.ShippingAddress AS [SC_Orders.ShippingAddress],
            T.BillingAddress AS [SC_Orders.BillingAddress],
            T.EmailID AS [SC_Orders.EmailID],
            T.Mobile AS [SC_Orders.Mobile],
            T.ShipmentTypeID AS [SC_Orders.ShipmentTypeID],
            T.OrderTotal AS [SC_Orders.OrderTotal],
            T.ShipmentCost AS [SC_Orders.ShipmentCost],
            T.IsConfirmed AS [SC_Orders.IsConfirmed],
            T.IsCancelled AS [SC_Orders.IsCancelled],
            T.IsCompleted AS [SC_Orders.IsCompleted],
            T.IsPaid AS [SC_Orders.IsPaid],
            T.IsFailed AS [SC_Orders.IsFailed],
            T.IsRefund AS [SC_Orders.IsRefund],
            T.IsDispatched AS [SC_Orders.IsDispatched],
            T.IsReturned AS [SC_Orders.IsReturned],
            T.ReceiptHTML AS [SC_Orders.ReceiptHTML],
            True AS _from0
        FROM ShoppingCartEntities.SC_Orders AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_ProductDownloads.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_ProductDownloads
        [ShoppingCartModel.Store.SC_ProductDownloads](T1.[SC_ProductDownloads.ProductDownloadID], T1.[SC_ProductDownloads.ProductID], T1.[SC_ProductDownloads.Title], T1.[SC_ProductDownloads.Description], T1.[SC_ProductDownloads.Hide], T1.[SC_ProductDownloads.DisableDownloadAfterDays], T1.[SC_ProductDownloads.MaxDownloadsAllowed], T1.[SC_ProductDownloads.DownloadURL], T1.[SC_ProductDownloads.WebDownloadURL], T1.[SC_ProductDownloads.UseWebDownloadURL])
    FROM (
        SELECT
            T.ProductDownloadID AS [SC_ProductDownloads.ProductDownloadID],
            T.ProductID AS [SC_ProductDownloads.ProductID],
            T.Title AS [SC_ProductDownloads.Title],
            T.Description AS [SC_ProductDownloads.Description],
            T.Hide AS [SC_ProductDownloads.Hide],
            T.DisableDownloadAfterDays AS [SC_ProductDownloads.DisableDownloadAfterDays],
            T.MaxDownloadsAllowed AS [SC_ProductDownloads.MaxDownloadsAllowed],
            T.DownloadURL AS [SC_ProductDownloads.DownloadURL],
            T.WebDownloadURL AS [SC_ProductDownloads.WebDownloadURL],
            T.UseWebDownloadURL AS [SC_ProductDownloads.UseWebDownloadURL],
            True AS _from0
        FROM ShoppingCartEntities.SC_ProductDownloads AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_ProductIcons.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_ProductIcons
        [ShoppingCartModel.Store.SC_ProductIcons](T1.[SC_ProductIcons.ProductIconID], T1.[SC_ProductIcons.ProductID], T1.[SC_ProductIcons.IconID])
    FROM (
        SELECT
            T.ProductIconID AS [SC_ProductIcons.ProductIconID],
            T.ProductID AS [SC_ProductIcons.ProductID],
            T.IconID AS [SC_ProductIcons.IconID],
            True AS _from0
        FROM ShoppingCartEntities.SC_ProductIcons AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_ProductImages.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_ProductImages
        [ShoppingCartModel.Store.SC_ProductImages](T1.[SC_ProductImages.ProductImageID], T1.[SC_ProductImages.ProductID], T1.[SC_ProductImages.ImageURL], T1.[SC_ProductImages.ImageThumbURL], T1.[SC_ProductImages.WebImageURL], T1.[SC_ProductImages.WebThumbImageURL], T1.[SC_ProductImages.AlternateText], T1.[SC_ProductImages.Hide], T1.[SC_ProductImages.ShowWebImage])
    FROM (
        SELECT
            T.ProductImageID AS [SC_ProductImages.ProductImageID],
            T.ProductID AS [SC_ProductImages.ProductID],
            T.ImageURL AS [SC_ProductImages.ImageURL],
            T.ImageThumbURL AS [SC_ProductImages.ImageThumbURL],
            T.WebImageURL AS [SC_ProductImages.WebImageURL],
            T.WebThumbImageURL AS [SC_ProductImages.WebThumbImageURL],
            T.AlternateText AS [SC_ProductImages.AlternateText],
            T.Hide AS [SC_ProductImages.Hide],
            T.ShowWebImage AS [SC_ProductImages.ShowWebImage],
            True AS _from0
        FROM ShoppingCartEntities.SC_ProductImages AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_ProductLocks.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_ProductLocks
        [ShoppingCartModel.Store.SC_ProductLocks](T1.[SC_ProductLocks.ProductLockID], T1.[SC_ProductLocks.ProductID], T1.[SC_ProductLocks.Quantity], T1.[SC_ProductLocks.Username], T1.[SC_ProductLocks.AnonymousUserID], T1.[SC_ProductLocks.Timeout])
    FROM (
        SELECT
            T.ProductLockID AS [SC_ProductLocks.ProductLockID],
            T.ProductID AS [SC_ProductLocks.ProductID],
            T.Quantity AS [SC_ProductLocks.Quantity],
            T.Username AS [SC_ProductLocks.Username],
            T.AnonymousUserID AS [SC_ProductLocks.AnonymousUserID],
            T.Timeout AS [SC_ProductLocks.Timeout],
            True AS _from0
        FROM ShoppingCartEntities.SC_ProductLocks AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_ProductModels.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_ProductModels
        [ShoppingCartModel.Store.SC_ProductModels](T1.[SC_ProductModels.ProductModelID], T1.[SC_ProductModels.Title], T1.[SC_ProductModels.Description], T1.[SC_ProductModels.Hide], T1.[SC_ProductModels.SectionID], T1.[SC_ProductModels.CategoryID], T1.[SC_ProductModels.SubCategoryID])
    FROM (
        SELECT
            T.ProductModelID AS [SC_ProductModels.ProductModelID],
            T.Title AS [SC_ProductModels.Title],
            T.Description AS [SC_ProductModels.Description],
            T.Hide AS [SC_ProductModels.Hide],
            T.SectionID AS [SC_ProductModels.SectionID],
            T.CategoryID AS [SC_ProductModels.CategoryID],
            T.SubCategoryID AS [SC_ProductModels.SubCategoryID],
            True AS _from0
        FROM ShoppingCartEntities.SC_ProductModels AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_Products.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Products
        [ShoppingCartModel.Store.SC_Products](T1.[SC_Products.ProductID], T1.[SC_Products.Title], T1.[SC_Products.SubTitle], T1.[SC_Products.Description], T1.[SC_Products.CostPrice], T1.[SC_Products.Price], T1.[SC_Products.AvailableQuantity], T1.[SC_Products.IsPriceOnRequest], T1.[SC_Products.HasDiscount], T1.[SC_Products.DiscountPercentage], T1.[SC_Products.DiscountAmount], T1.[SC_Products.IsDiscountRangeEnabled], T1.[SC_Products.PriceDescription], T1.[SC_Products.SpecialOffer], T1.[SC_Products.Details], T1.[SC_Products.PreOderFlag], T1.[SC_Products.PreOrderDescription], T1.[SC_Products.PreOrderReleaseDate], T1.[SC_Products.RemovePreOrderOnDate], T1.[SC_Products.SectionID], T1.[SC_Products.CategoryID], T1.[SC_Products.SubCategoryID], T1.[SC_Products.ProductModelID], T1.[SC_Products.ProductTypeID], T1.[SC_Products.AvailabilityTypeID], T1.[SC_Products.BrandID], T1.[SC_Products.UnitID], T1.[SC_Products.SizeID], T1.[SC_Products.ColorID], T1.[SC_Products.Hide], T1.[SC_Products.Model], T1.[SC_Products.Manufacturer], T1.[SC_Products.ItemNumber], T1.[SC_Products.MaxOQ], T1.[SC_Products.MinOQ], T1.[SC_Products.Tags], T1.[SC_Products.Likes], T1.[SC_Products.UploadedOn], T1.[SC_Products.ShowInCart], T1.[SC_Products.SoldOutCount], T1.[SC_Products.Barcode], T1.[SC_Products.IsDownloadable], T1.[SC_Products.StringField1], T1.[SC_Products.StringField2], T1.[SC_Products.StringField3], T1.[SC_Products.FloatField1], T1.[SC_Products.FloatField2], T1.[SC_Products.FloatField3], T1.[SC_Products.IntField1], T1.[SC_Products.IntField2], T1.[SC_Products.IntField3])
    FROM (
        SELECT
            T.ProductID AS [SC_Products.ProductID],
            T.Title AS [SC_Products.Title],
            T.SubTitle AS [SC_Products.SubTitle],
            T.Description AS [SC_Products.Description],
            T.CostPrice AS [SC_Products.CostPrice],
            T.Price AS [SC_Products.Price],
            T.AvailableQuantity AS [SC_Products.AvailableQuantity],
            T.IsPriceOnRequest AS [SC_Products.IsPriceOnRequest],
            T.HasDiscount AS [SC_Products.HasDiscount],
            T.DiscountPercentage AS [SC_Products.DiscountPercentage],
            T.DiscountAmount AS [SC_Products.DiscountAmount],
            T.IsDiscountRangeEnabled AS [SC_Products.IsDiscountRangeEnabled],
            T.PriceDescription AS [SC_Products.PriceDescription],
            T.SpecialOffer AS [SC_Products.SpecialOffer],
            T.Details AS [SC_Products.Details],
            T.PreOderFlag AS [SC_Products.PreOderFlag],
            T.PreOrderDescription AS [SC_Products.PreOrderDescription],
            T.PreOrderReleaseDate AS [SC_Products.PreOrderReleaseDate],
            T.RemovePreOrderOnDate AS [SC_Products.RemovePreOrderOnDate],
            T.SectionID AS [SC_Products.SectionID],
            T.CategoryID AS [SC_Products.CategoryID],
            T.SubCategoryID AS [SC_Products.SubCategoryID],
            T.ProductModelID AS [SC_Products.ProductModelID],
            T.ProductTypeID AS [SC_Products.ProductTypeID],
            T.AvailabilityTypeID AS [SC_Products.AvailabilityTypeID],
            T.BrandID AS [SC_Products.BrandID],
            T.UnitID AS [SC_Products.UnitID],
            T.SizeID AS [SC_Products.SizeID],
            T.ColorID AS [SC_Products.ColorID],
            T.Hide AS [SC_Products.Hide],
            T.Model AS [SC_Products.Model],
            T.Manufacturer AS [SC_Products.Manufacturer],
            T.ItemNumber AS [SC_Products.ItemNumber],
            T.MaxOQ AS [SC_Products.MaxOQ],
            T.MinOQ AS [SC_Products.MinOQ],
            T.Tags AS [SC_Products.Tags],
            T.Likes AS [SC_Products.Likes],
            T.UploadedOn AS [SC_Products.UploadedOn],
            T.ShowInCart AS [SC_Products.ShowInCart],
            T.SoldOutCount AS [SC_Products.SoldOutCount],
            T.Barcode AS [SC_Products.Barcode],
            T.IsDownloadable AS [SC_Products.IsDownloadable],
            T.StringField1 AS [SC_Products.StringField1],
            T.StringField2 AS [SC_Products.StringField2],
            T.StringField3 AS [SC_Products.StringField3],
            T.FloatField1 AS [SC_Products.FloatField1],
            T.FloatField2 AS [SC_Products.FloatField2],
            T.FloatField3 AS [SC_Products.FloatField3],
            T.IntField1 AS [SC_Products.IntField1],
            T.IntField2 AS [SC_Products.IntField2],
            T.IntField3 AS [SC_Products.IntField3],
            True AS _from0
        FROM ShoppingCartEntities.SC_Products AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_ProductTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_ProductTypes
        [ShoppingCartModel.Store.SC_ProductTypes](T1.[SC_ProductTypes.ProductTypeID], T1.[SC_ProductTypes.Title], T1.[SC_ProductTypes.Description], T1.[SC_ProductTypes.Hide], T1.[SC_ProductTypes.SectionID], T1.[SC_ProductTypes.CategoryID], T1.[SC_ProductTypes.SubCategoryID])
    FROM (
        SELECT
            T.ProductTypeID AS [SC_ProductTypes.ProductTypeID],
            T.Title AS [SC_ProductTypes.Title],
            T.Description AS [SC_ProductTypes.Description],
            T.Hide AS [SC_ProductTypes.Hide],
            T.SectionID AS [SC_ProductTypes.SectionID],
            T.CategoryID AS [SC_ProductTypes.CategoryID],
            T.SubCategoryID AS [SC_ProductTypes.SubCategoryID],
            True AS _from0
        FROM ShoppingCartEntities.SC_ProductTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_ProductVideos.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView25()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_ProductVideos
        [ShoppingCartModel.Store.SC_ProductVideos](T1.[SC_ProductVideos.ProductVideoID], T1.[SC_ProductVideos.ProductID], T1.[SC_ProductVideos.YouTubeVideoURL], T1.[SC_ProductVideos.OtherVideoURL], T1.[SC_ProductVideos.VideoURL], T1.[SC_ProductVideos.Title], T1.[SC_ProductVideos.Description], T1.[SC_ProductVideos.ShowYouTubeVideo], T1.[SC_ProductVideos.ShowOtherVideo], T1.[SC_ProductVideos.ShowLocalVideo], T1.[SC_ProductVideos.Hide])
    FROM (
        SELECT
            T.ProductVideoID AS [SC_ProductVideos.ProductVideoID],
            T.ProductID AS [SC_ProductVideos.ProductID],
            T.YouTubeVideoURL AS [SC_ProductVideos.YouTubeVideoURL],
            T.OtherVideoURL AS [SC_ProductVideos.OtherVideoURL],
            T.VideoURL AS [SC_ProductVideos.VideoURL],
            T.Title AS [SC_ProductVideos.Title],
            T.Description AS [SC_ProductVideos.Description],
            T.ShowYouTubeVideo AS [SC_ProductVideos.ShowYouTubeVideo],
            T.ShowOtherVideo AS [SC_ProductVideos.ShowOtherVideo],
            T.ShowLocalVideo AS [SC_ProductVideos.ShowLocalVideo],
            T.Hide AS [SC_ProductVideos.Hide],
            True AS _from0
        FROM ShoppingCartEntities.SC_ProductVideos AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_Ratings.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView26()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Ratings
        [ShoppingCartModel.Store.SC_Ratings](T1.[SC_Ratings.RatingID], T1.[SC_Ratings.ProductID], T1.[SC_Ratings.Rating])
    FROM (
        SELECT
            T.RatingID AS [SC_Ratings.RatingID],
            T.ProductID AS [SC_Ratings.ProductID],
            T.Rating AS [SC_Ratings.Rating],
            True AS _from0
        FROM ShoppingCartEntities.SC_Ratings AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_Reviews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView27()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Reviews
        [ShoppingCartModel.Store.SC_Reviews](T1.[SC_Reviews.ReviewID], T1.[SC_Reviews.ProductID], T1.[SC_Reviews.DateTime], T1.[SC_Reviews.Username], T1.[SC_Reviews.Review], T1.[SC_Reviews.Approved], T1.[SC_Reviews.Hide], T1.[SC_Reviews.RatingID])
    FROM (
        SELECT
            T.ReviewID AS [SC_Reviews.ReviewID],
            T.ProductID AS [SC_Reviews.ProductID],
            T.DateTime AS [SC_Reviews.DateTime],
            T.Username AS [SC_Reviews.Username],
            T.Review AS [SC_Reviews.Review],
            T.Approved AS [SC_Reviews.Approved],
            T.Hide AS [SC_Reviews.Hide],
            T.RatingID AS [SC_Reviews.RatingID],
            True AS _from0
        FROM ShoppingCartEntities.SC_Reviews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_Sections.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView28()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Sections
        [ShoppingCartModel.Store.SC_Sections](T1.[SC_Sections.SectionID], T1.[SC_Sections.Title], T1.[SC_Sections.Description], T1.[SC_Sections.ImageURL], T1.[SC_Sections.ImageThumbURL], T1.[SC_Sections.AlternateText], T1.[SC_Sections.Hide])
    FROM (
        SELECT
            T.SectionID AS [SC_Sections.SectionID],
            T.Title AS [SC_Sections.Title],
            T.Description AS [SC_Sections.Description],
            T.ImageURL AS [SC_Sections.ImageURL],
            T.ImageThumbURL AS [SC_Sections.ImageThumbURL],
            T.AlternateText AS [SC_Sections.AlternateText],
            T.Hide AS [SC_Sections.Hide],
            True AS _from0
        FROM ShoppingCartEntities.SC_Sections AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_ShipmentCompanies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView29()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_ShipmentCompanies
        [ShoppingCartModel.Store.SC_ShipmentCompanies](T1.[SC_ShipmentCompanies.ShipmentCompanyID], T1.[SC_ShipmentCompanies.Title], T1.[SC_ShipmentCompanies.Description], T1.[SC_ShipmentCompanies.ImageURL], T1.[SC_ShipmentCompanies.ImageThumbURL], T1.[SC_ShipmentCompanies.AlternateText], T1.[SC_ShipmentCompanies.Hide])
    FROM (
        SELECT
            T.ShipmentCompanyID AS [SC_ShipmentCompanies.ShipmentCompanyID],
            T.Title AS [SC_ShipmentCompanies.Title],
            T.Description AS [SC_ShipmentCompanies.Description],
            T.ImageURL AS [SC_ShipmentCompanies.ImageURL],
            T.ImageThumbURL AS [SC_ShipmentCompanies.ImageThumbURL],
            T.AlternateText AS [SC_ShipmentCompanies.AlternateText],
            T.Hide AS [SC_ShipmentCompanies.Hide],
            True AS _from0
        FROM ShoppingCartEntities.SC_ShipmentCompanies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_ShipmentTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView30()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_ShipmentTypes
        [ShoppingCartModel.Store.SC_ShipmentTypes](T1.[SC_ShipmentTypes.ShipmentTypeID], T1.[SC_ShipmentTypes.Title], T1.[SC_ShipmentTypes.Description], T1.[SC_ShipmentTypes.Hide])
    FROM (
        SELECT
            T.ShipmentTypeID AS [SC_ShipmentTypes.ShipmentTypeID],
            T.Title AS [SC_ShipmentTypes.Title],
            T.Description AS [SC_ShipmentTypes.Description],
            T.Hide AS [SC_ShipmentTypes.Hide],
            True AS _from0
        FROM ShoppingCartEntities.SC_ShipmentTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_Sizes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView31()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Sizes
        [ShoppingCartModel.Store.SC_Sizes](T1.[SC_Sizes.SizeID], T1.[SC_Sizes.Title], T1.[SC_Sizes.Description], T1.[SC_Sizes.SectionID], T1.[SC_Sizes.CategoryID], T1.[SC_Sizes.SubCategoryID])
    FROM (
        SELECT
            T.SizeID AS [SC_Sizes.SizeID],
            T.Title AS [SC_Sizes.Title],
            T.Description AS [SC_Sizes.Description],
            T.SectionID AS [SC_Sizes.SectionID],
            T.CategoryID AS [SC_Sizes.CategoryID],
            T.SubCategoryID AS [SC_Sizes.SubCategoryID],
            True AS _from0
        FROM ShoppingCartEntities.SC_Sizes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_SubCategories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView32()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_SubCategories
        [ShoppingCartModel.Store.SC_SubCategories](T1.[SC_SubCategories.SubCategoryID], T1.[SC_SubCategories.Title], T1.[SC_SubCategories.Description], T1.[SC_SubCategories.ImageURL], T1.[SC_SubCategories.ImageThumbURL], T1.[SC_SubCategories.AlternateText], T1.[SC_SubCategories.CategoryID], T1.[SC_SubCategories.Hide])
    FROM (
        SELECT
            T.SubCategoryID AS [SC_SubCategories.SubCategoryID],
            T.Title AS [SC_SubCategories.Title],
            T.Description AS [SC_SubCategories.Description],
            T.ImageURL AS [SC_SubCategories.ImageURL],
            T.ImageThumbURL AS [SC_SubCategories.ImageThumbURL],
            T.AlternateText AS [SC_SubCategories.AlternateText],
            T.CategoryID AS [SC_SubCategories.CategoryID],
            T.Hide AS [SC_SubCategories.Hide],
            True AS _from0
        FROM ShoppingCartEntities.SC_SubCategories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_TempCart.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView33()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_TempCart
        [ShoppingCartModel.Store.SC_TempCart](T1.[SC_TempCart.CartID], T1.[SC_TempCart.AnonymousUserID], T1.[SC_TempCart.ProductID], T1.[SC_TempCart.Quantity])
    FROM (
        SELECT
            T.CartID AS [SC_TempCart.CartID],
            T.AnonymousUserID AS [SC_TempCart.AnonymousUserID],
            T.ProductID AS [SC_TempCart.ProductID],
            T.Quantity AS [SC_TempCart.Quantity],
            True AS _from0
        FROM ShoppingCartEntities.SC_TempCart AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_Trackings.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView34()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Trackings
        [ShoppingCartModel.Store.SC_Trackings](T1.[SC_Trackings.TrackingID], T1.[SC_Trackings.Title])
    FROM (
        SELECT
            T.TrackingID AS [SC_Trackings.TrackingID],
            T.Title AS [SC_Trackings.Title],
            True AS _from0
        FROM ShoppingCartEntities.SC_Trackings AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_Units.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView35()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Units
        [ShoppingCartModel.Store.SC_Units](T1.[SC_Units.UnitID], T1.[SC_Units.Title], T1.[SC_Units.Description], T1.[SC_Units.SectionID], T1.[SC_Units.CategoryID], T1.[SC_Units.SubCategoryID])
    FROM (
        SELECT
            T.UnitID AS [SC_Units.UnitID],
            T.Title AS [SC_Units.Title],
            T.Description AS [SC_Units.Description],
            T.SectionID AS [SC_Units.SectionID],
            T.CategoryID AS [SC_Units.CategoryID],
            T.SubCategoryID AS [SC_Units.SubCategoryID],
            True AS _from0
        FROM ShoppingCartEntities.SC_Units AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_UserCardDetails.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView36()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_UserCardDetails
        [ShoppingCartModel.Store.SC_UserCardDetails](T1.[SC_UserCardDetails.UserCardDetailsID], T1.[SC_UserCardDetails.Title], T1.[SC_UserCardDetails.Username], T1.[SC_UserCardDetails.NameOnCard], T1.[SC_UserCardDetails.CardTypeID], T1.[SC_UserCardDetails.CardNumber], T1.[SC_UserCardDetails.SecurityCode], T1.[SC_UserCardDetails.ValidFrom], T1.[SC_UserCardDetails.ValidTill])
    FROM (
        SELECT
            T.UserCardDetailsID AS [SC_UserCardDetails.UserCardDetailsID],
            T.Title AS [SC_UserCardDetails.Title],
            T.Username AS [SC_UserCardDetails.Username],
            T.NameOnCard AS [SC_UserCardDetails.NameOnCard],
            T.CardTypeID AS [SC_UserCardDetails.CardTypeID],
            T.CardNumber AS [SC_UserCardDetails.CardNumber],
            T.SecurityCode AS [SC_UserCardDetails.SecurityCode],
            T.ValidFrom AS [SC_UserCardDetails.ValidFrom],
            T.ValidTill AS [SC_UserCardDetails.ValidTill],
            True AS _from0
        FROM ShoppingCartEntities.SC_UserCardDetails AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_UserCart.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView37()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_UserCart
        [ShoppingCartModel.Store.SC_UserCart](T1.[SC_UserCart.CartID], T1.[SC_UserCart.Username], T1.[SC_UserCart.ProductID], T1.[SC_UserCart.Quantity])
    FROM (
        SELECT
            T.CartID AS [SC_UserCart.CartID],
            T.Username AS [SC_UserCart.Username],
            T.ProductID AS [SC_UserCart.ProductID],
            T.Quantity AS [SC_UserCart.Quantity],
            True AS _from0
        FROM ShoppingCartEntities.SC_UserCart AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartModelStoreContainer.SC_UserOrders.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView38()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_UserOrders
        [ShoppingCartModel.Store.SC_UserOrders](T1.[SC_UserOrders.UserOrderID], T1.[SC_UserOrders.Username], T1.[SC_UserOrders.OrderNumber])
    FROM (
        SELECT
            T.UserOrderID AS [SC_UserOrders.UserOrderID],
            T.Username AS [SC_UserOrders.Username],
            T.OrderNumber AS [SC_UserOrders.OrderNumber],
            True AS _from0
        FROM ShoppingCartEntities.SC_UserOrders AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_UserAdresses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView39()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_UserAdresses
        [ShoppingCartModel.SC_UserAdresses](T1.[SC_UserAdresses.AddressID], T1.[SC_UserAdresses.Username], T1.[SC_UserAdresses.AddressCategory], T1.[SC_UserAdresses.StreetName], T1.[SC_UserAdresses.City], T1.[SC_UserAdresses.ZipCode], T1.[SC_UserAdresses.State], T1.[SC_UserAdresses.Country], T1.[SC_UserAdresses.Hide])
    FROM (
        SELECT
            T.AddressID AS [SC_UserAdresses.AddressID],
            T.Username AS [SC_UserAdresses.Username],
            T.AddressCategory AS [SC_UserAdresses.AddressCategory],
            T.StreetName AS [SC_UserAdresses.StreetName],
            T.City AS [SC_UserAdresses.City],
            T.ZipCode AS [SC_UserAdresses.ZipCode],
            T.State AS [SC_UserAdresses.State],
            T.Country AS [SC_UserAdresses.Country],
            T.Hide AS [SC_UserAdresses.Hide],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.MS_UserAdresses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_UserCategories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView40()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_UserCategories
        [ShoppingCartModel.SC_UserCategories](T1.[SC_UserCategories.UserCategoryID], T1.[SC_UserCategories.Title], T1.[SC_UserCategories.Description], T1.[SC_UserCategories.Hide])
    FROM (
        SELECT
            T.UserCategoryID AS [SC_UserCategories.UserCategoryID],
            T.Title AS [SC_UserCategories.Title],
            T.Description AS [SC_UserCategories.Description],
            T.Hide AS [SC_UserCategories.Hide],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.MS_UserCategories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView41()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Users
        [ShoppingCartModel.SC_Users](T1.[SC_Users.Username], T1.[SC_Users.Name], T1.[SC_Users.Email], T1.[SC_Users.ProfilePic], T1.[SC_Users.SecurityQuestion], T1.[SC_Users.SecurityAnswer], T1.[SC_Users.DateOfBirth], T1.[SC_Users.Gender], T1.[SC_Users.UserRole], T1.[SC_Users.UserCategoryID], T1.[SC_Users.Hide])
    FROM (
        SELECT
            T.Username AS [SC_Users.Username],
            T.Name AS [SC_Users.Name],
            T.Email AS [SC_Users.Email],
            T.ProfilePic AS [SC_Users.ProfilePic],
            T.SecurityQuestion AS [SC_Users.SecurityQuestion],
            T.SecurityAnswer AS [SC_Users.SecurityAnswer],
            T.DateOfBirth AS [SC_Users.DateOfBirth],
            T.Gender AS [SC_Users.Gender],
            T.UserRole AS [SC_Users.UserRole],
            T.UserCategoryID AS [SC_Users.UserCategoryID],
            T.Hide AS [SC_Users.Hide],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.MS_Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_UsersData.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView42()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_UsersData
        [ShoppingCartModel.SC_UsersData](T1.[SC_UsersData.UserDataID], T1.[SC_UsersData.Username], T1.[SC_UsersData.UsersDataCategory], T1.[SC_UsersData.UserData], T1.[SC_UsersData.Hide])
    FROM (
        SELECT
            T.UserDataID AS [SC_UsersData.UserDataID],
            T.Username AS [SC_UsersData.Username],
            T.UsersDataCategory AS [SC_UsersData.UsersDataCategory],
            T.UserData AS [SC_UsersData.UserData],
            T.Hide AS [SC_UsersData.Hide],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.MS_UsersData AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_AvailabilityTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView43()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_AvailabilityTypes
        [ShoppingCartModel.SC_AvailabilityTypes](T1.[SC_AvailabilityTypes.AvailabilityTypeID], T1.[SC_AvailabilityTypes.Title], T1.[SC_AvailabilityTypes.Description], T1.[SC_AvailabilityTypes.Hide], T1.[SC_AvailabilityTypes.ColorName])
    FROM (
        SELECT
            T.AvailabilityTypeID AS [SC_AvailabilityTypes.AvailabilityTypeID],
            T.Title AS [SC_AvailabilityTypes.Title],
            T.Description AS [SC_AvailabilityTypes.Description],
            T.Hide AS [SC_AvailabilityTypes.Hide],
            T.ColorName AS [SC_AvailabilityTypes.ColorName],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_AvailabilityTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_Brands.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView44()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Brands
        [ShoppingCartModel.SC_Brands](T1.[SC_Brands.BrandID], T1.[SC_Brands.Title], T1.[SC_Brands.Description], T1.[SC_Brands.ImageURL], T1.[SC_Brands.Hide])
    FROM (
        SELECT
            T.BrandID AS [SC_Brands.BrandID],
            T.Title AS [SC_Brands.Title],
            T.Description AS [SC_Brands.Description],
            T.ImageURL AS [SC_Brands.ImageURL],
            T.Hide AS [SC_Brands.Hide],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_Brands AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_CardTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView45()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_CardTypes
        [ShoppingCartModel.SC_CardTypes](T1.[SC_CardTypes.CardTypeID], T1.[SC_CardTypes.Title], T1.[SC_CardTypes.Description], T1.[SC_CardTypes.Hide])
    FROM (
        SELECT
            T.CardTypeID AS [SC_CardTypes.CardTypeID],
            T.Title AS [SC_CardTypes.Title],
            T.Description AS [SC_CardTypes.Description],
            T.Hide AS [SC_CardTypes.Hide],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_CardTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_Categories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView46()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Categories
        [ShoppingCartModel.SC_Categories](T1.[SC_Categories.CategoryID], T1.[SC_Categories.Title], T1.[SC_Categories.Description], T1.[SC_Categories.ImageURL], T1.[SC_Categories.ImageThumbURL], T1.[SC_Categories.AlternateText], T1.[SC_Categories.Hide], T1.[SC_Categories.SectionID])
    FROM (
        SELECT
            T.CategoryID AS [SC_Categories.CategoryID],
            T.Title AS [SC_Categories.Title],
            T.Description AS [SC_Categories.Description],
            T.ImageURL AS [SC_Categories.ImageURL],
            T.ImageThumbURL AS [SC_Categories.ImageThumbURL],
            T.AlternateText AS [SC_Categories.AlternateText],
            T.Hide AS [SC_Categories.Hide],
            T.SectionID AS [SC_Categories.SectionID],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_Categories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_Colors.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView47()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Colors
        [ShoppingCartModel.SC_Colors](T1.[SC_Colors.ColorID], T1.[SC_Colors.Title], T1.[SC_Colors.Name], T1.[SC_Colors.Hex], T1.[SC_Colors.SectionID], T1.[SC_Colors.CategoryID], T1.[SC_Colors.SubCategoryID], T1.[SC_Colors.ImageURL])
    FROM (
        SELECT
            T.ColorID AS [SC_Colors.ColorID],
            T.Title AS [SC_Colors.Title],
            T.Name AS [SC_Colors.Name],
            T.Hex AS [SC_Colors.Hex],
            T.SectionID AS [SC_Colors.SectionID],
            T.CategoryID AS [SC_Colors.CategoryID],
            T.SubCategoryID AS [SC_Colors.SubCategoryID],
            T.ImageURL AS [SC_Colors.ImageURL],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_Colors AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_CouponProducts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView48()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_CouponProducts
        [ShoppingCartModel.SC_CouponProducts](T1.[SC_CouponProducts.CouponProductsID], T1.[SC_CouponProducts.CouponID], T1.[SC_CouponProducts.ProductID], T1.[SC_CouponProducts.AntiCouponProductID])
    FROM (
        SELECT
            T.CouponProductsID AS [SC_CouponProducts.CouponProductsID],
            T.CouponID AS [SC_CouponProducts.CouponID],
            T.ProductID AS [SC_CouponProducts.ProductID],
            T.AntiCouponProductID AS [SC_CouponProducts.AntiCouponProductID],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_CouponProducts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_Coupons.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView49()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Coupons
        [ShoppingCartModel.SC_Coupons](T1.[SC_Coupons.CouponID], T1.[SC_Coupons.Title], T1.[SC_Coupons.Description], T1.[SC_Coupons.Code], T1.[SC_Coupons.DiscountAmountOnTotal], T1.[SC_Coupons.DiscountPercentageOnTotal], T1.[SC_Coupons.DiscountAmountOnEach], T1.[SC_Coupons.DiscountPercentageOnEach], T1.[SC_Coupons.DiscountAmountOnShipping], T1.[SC_Coupons.DiscountPercentageOnShipping], T1.[SC_Coupons.FreeShipping], T1.[SC_Coupons.MinCartAmount], T1.[SC_Coupons.CouponUseCount], T1.[SC_Coupons.CouponUseCountPerCustomer], T1.[SC_Coupons.IsEnabled], T1.[SC_Coupons.ExpiresOn], T1.[SC_Coupons.SectionID], T1.[SC_Coupons.CategoryID], T1.[SC_Coupons.SubCategoryID], T1.[SC_Coupons.BrandID])
    FROM (
        SELECT
            T.CouponID AS [SC_Coupons.CouponID],
            T.Title AS [SC_Coupons.Title],
            T.Description AS [SC_Coupons.Description],
            T.Code AS [SC_Coupons.Code],
            T.DiscountAmountOnTotal AS [SC_Coupons.DiscountAmountOnTotal],
            T.DiscountPercentageOnTotal AS [SC_Coupons.DiscountPercentageOnTotal],
            T.DiscountAmountOnEach AS [SC_Coupons.DiscountAmountOnEach],
            T.DiscountPercentageOnEach AS [SC_Coupons.DiscountPercentageOnEach],
            T.DiscountAmountOnShipping AS [SC_Coupons.DiscountAmountOnShipping],
            T.DiscountPercentageOnShipping AS [SC_Coupons.DiscountPercentageOnShipping],
            T.FreeShipping AS [SC_Coupons.FreeShipping],
            T.MinCartAmount AS [SC_Coupons.MinCartAmount],
            T.CouponUseCount AS [SC_Coupons.CouponUseCount],
            T.CouponUseCountPerCustomer AS [SC_Coupons.CouponUseCountPerCustomer],
            T.IsEnabled AS [SC_Coupons.IsEnabled],
            T.ExpiresOn AS [SC_Coupons.ExpiresOn],
            T.SectionID AS [SC_Coupons.SectionID],
            T.CategoryID AS [SC_Coupons.CategoryID],
            T.SubCategoryID AS [SC_Coupons.SubCategoryID],
            T.BrandID AS [SC_Coupons.BrandID],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_Coupons AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_DiscountRanges.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView50()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_DiscountRanges
        [ShoppingCartModel.SC_DiscountRanges](T1.[SC_DiscountRanges.DiscountRangeID], T1.[SC_DiscountRanges.LowerRange], T1.[SC_DiscountRanges.UpperRange], T1.[SC_DiscountRanges.ProductID], T1.[SC_DiscountRanges.DiscountPercentage], T1.[SC_DiscountRanges.DiscountAmount], T1.[SC_DiscountRanges.FixedPrice])
    FROM (
        SELECT
            T.DiscountRangeID AS [SC_DiscountRanges.DiscountRangeID],
            T.LowerRange AS [SC_DiscountRanges.LowerRange],
            T.UpperRange AS [SC_DiscountRanges.UpperRange],
            T.ProductID AS [SC_DiscountRanges.ProductID],
            T.DiscountPercentage AS [SC_DiscountRanges.DiscountPercentage],
            T.DiscountAmount AS [SC_DiscountRanges.DiscountAmount],
            T.FixedPrice AS [SC_DiscountRanges.FixedPrice],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_DiscountRanges AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_DiscountRules.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView51()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_DiscountRules
        [ShoppingCartModel.SC_DiscountRules](T1.[SC_DiscountRules.DiscountRuleID], T1.[SC_DiscountRules.Title], T1.[SC_DiscountRules.Description], T1.[SC_DiscountRules.IsEnabled], T1.[SC_DiscountRules.IsExpirable], T1.[SC_DiscountRules.ExpiresOn], T1.[SC_DiscountRules.ExpiresAfterUses], T1.[SC_DiscountRules.ExpiresAfterDays], T1.[SC_DiscountRules.ProductQuantityOnToShipFree], T1.[SC_DiscountRules.ProductQuantityOnToShipFreeProductID], T1.[SC_DiscountRules.CartAmountOnToShipFree], T1.[SC_DiscountRules.CartDiscountOnTotalAmount], T1.[SC_DiscountRules.CartDiscountAmount], T1.[SC_DiscountRules.CartDiscountPercentage], T1.[SC_DiscountRules.DiscountPercentageForRepeatCustomer], T1.[SC_DiscountRules.DiscountAmountForRepeatCustomer], T1.[SC_DiscountRules.CustomerPurchaseRepeatCount], T1.[SC_DiscountRules.BuyThisCount], T1.[SC_DiscountRules.GetThisCount], T1.[SC_DiscountRules.GetThatCount], T1.[SC_DiscountRules.BuyThisProductID], T1.[SC_DiscountRules.GetThisProductID], T1.[SC_DiscountRules.DiscountOnSectionID], T1.[SC_DiscountRules.DiscountOnCategoryID], T1.[SC_DiscountRules.DiscountOnSubCategoryID], T1.[SC_DiscountRules.DiscountOnBrandID], T1.[SC_DiscountRules.DiscountPercentageOnSecCatSubBrand])
    FROM (
        SELECT
            T.DiscountRuleID AS [SC_DiscountRules.DiscountRuleID],
            T.Title AS [SC_DiscountRules.Title],
            T.Description AS [SC_DiscountRules.Description],
            T.IsEnabled AS [SC_DiscountRules.IsEnabled],
            T.IsExpirable AS [SC_DiscountRules.IsExpirable],
            T.ExpiresOn AS [SC_DiscountRules.ExpiresOn],
            T.ExpiresAfterUses AS [SC_DiscountRules.ExpiresAfterUses],
            T.ExpiresAfterDays AS [SC_DiscountRules.ExpiresAfterDays],
            T.ProductQuantityOnToShipFree AS [SC_DiscountRules.ProductQuantityOnToShipFree],
            T.ProductQuantityOnToShipFreeProductID AS [SC_DiscountRules.ProductQuantityOnToShipFreeProductID],
            T.CartAmountOnToShipFree AS [SC_DiscountRules.CartAmountOnToShipFree],
            T.CartDiscountOnTotalAmount AS [SC_DiscountRules.CartDiscountOnTotalAmount],
            T.CartDiscountAmount AS [SC_DiscountRules.CartDiscountAmount],
            T.CartDiscountPercentage AS [SC_DiscountRules.CartDiscountPercentage],
            T.DiscountPercentageForRepeatCustomer AS [SC_DiscountRules.DiscountPercentageForRepeatCustomer],
            T.DiscountAmountForRepeatCustomer AS [SC_DiscountRules.DiscountAmountForRepeatCustomer],
            T.CustomerPurchaseRepeatCount AS [SC_DiscountRules.CustomerPurchaseRepeatCount],
            T.BuyThisCount AS [SC_DiscountRules.BuyThisCount],
            T.GetThisCount AS [SC_DiscountRules.GetThisCount],
            T.GetThatCount AS [SC_DiscountRules.GetThatCount],
            T.BuyThisProductID AS [SC_DiscountRules.BuyThisProductID],
            T.GetThisProductID AS [SC_DiscountRules.GetThisProductID],
            T.DiscountOnSectionID AS [SC_DiscountRules.DiscountOnSectionID],
            T.DiscountOnCategoryID AS [SC_DiscountRules.DiscountOnCategoryID],
            T.DiscountOnSubCategoryID AS [SC_DiscountRules.DiscountOnSubCategoryID],
            T.DiscountOnBrandID AS [SC_DiscountRules.DiscountOnBrandID],
            T.DiscountPercentageOnSecCatSubBrand AS [SC_DiscountRules.DiscountPercentageOnSecCatSubBrand],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_DiscountRules AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_GuestOrders.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView52()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_GuestOrders
        [ShoppingCartModel.SC_GuestOrders](T1.[SC_GuestOrders.GuestOrderID], T1.[SC_GuestOrders.EmailID], T1.[SC_GuestOrders.Mobile], T1.[SC_GuestOrders.OrderNumber])
    FROM (
        SELECT
            T.GuestOrderID AS [SC_GuestOrders.GuestOrderID],
            T.EmailID AS [SC_GuestOrders.EmailID],
            T.Mobile AS [SC_GuestOrders.Mobile],
            T.OrderNumber AS [SC_GuestOrders.OrderNumber],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_GuestOrders AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_Highlights.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView53()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Highlights
        [ShoppingCartModel.SC_Highlights](T1.[SC_Highlights.HighlightID], T1.[SC_Highlights.ProductID], T1.[SC_Highlights.Highlight])
    FROM (
        SELECT
            T.HighlightID AS [SC_Highlights.HighlightID],
            T.ProductID AS [SC_Highlights.ProductID],
            T.Highlight AS [SC_Highlights.Highlight],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_Highlights AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_Icons.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView54()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Icons
        [ShoppingCartModel.SC_Icons](T1.[SC_Icons.IconID], T1.[SC_Icons.Title], T1.[SC_Icons.IconURL], T1.[SC_Icons.Description], T1.[SC_Icons.AlternateText])
    FROM (
        SELECT
            T.IconID AS [SC_Icons.IconID],
            T.Title AS [SC_Icons.Title],
            T.IconURL AS [SC_Icons.IconURL],
            T.Description AS [SC_Icons.Description],
            T.AlternateText AS [SC_Icons.AlternateText],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_Icons AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_OrderDetails.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView55()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_OrderDetails
        [ShoppingCartModel.SC_OrderDetails](T1.[SC_OrderDetails.OrderDetailID], T1.[SC_OrderDetails.OrderNumber], T1.[SC_OrderDetails.ProductID], T1.[SC_OrderDetails.Price], T1.[SC_OrderDetails.Quantity], T1.[SC_OrderDetails.ShipmentDate], T1.[SC_OrderDetails.DeliveryDate], T1.[SC_OrderDetails.ShipmentCompanyID], T1.[SC_OrderDetails.TrackingID])
    FROM (
        SELECT
            T.OrderDetailID AS [SC_OrderDetails.OrderDetailID],
            T.OrderNumber AS [SC_OrderDetails.OrderNumber],
            T.ProductID AS [SC_OrderDetails.ProductID],
            T.Price AS [SC_OrderDetails.Price],
            T.Quantity AS [SC_OrderDetails.Quantity],
            T.ShipmentDate AS [SC_OrderDetails.ShipmentDate],
            T.DeliveryDate AS [SC_OrderDetails.DeliveryDate],
            T.ShipmentCompanyID AS [SC_OrderDetails.ShipmentCompanyID],
            T.TrackingID AS [SC_OrderDetails.TrackingID],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_OrderDetails AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_Orders.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView56()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Orders
        [ShoppingCartModel.SC_Orders](T1.[SC_Orders.OrderNumber], T1.[SC_Orders.DateTime], T1.[SC_Orders.ShippingAddress], T1.[SC_Orders.BillingAddress], T1.[SC_Orders.EmailID], T1.[SC_Orders.Mobile], T1.[SC_Orders.ShipmentTypeID], T1.[SC_Orders.OrderTotal], T1.[SC_Orders.ShipmentCost], T1.[SC_Orders.IsConfirmed], T1.[SC_Orders.IsCancelled], T1.[SC_Orders.IsCompleted], T1.[SC_Orders.IsPaid], T1.[SC_Orders.IsFailed], T1.[SC_Orders.IsRefund], T1.[SC_Orders.IsDispatched], T1.[SC_Orders.IsReturned], T1.[SC_Orders.ReceiptHTML])
    FROM (
        SELECT
            T.OrderNumber AS [SC_Orders.OrderNumber],
            T.DateTime AS [SC_Orders.DateTime],
            T.ShippingAddress AS [SC_Orders.ShippingAddress],
            T.BillingAddress AS [SC_Orders.BillingAddress],
            T.EmailID AS [SC_Orders.EmailID],
            T.Mobile AS [SC_Orders.Mobile],
            T.ShipmentTypeID AS [SC_Orders.ShipmentTypeID],
            T.OrderTotal AS [SC_Orders.OrderTotal],
            T.ShipmentCost AS [SC_Orders.ShipmentCost],
            T.IsConfirmed AS [SC_Orders.IsConfirmed],
            T.IsCancelled AS [SC_Orders.IsCancelled],
            T.IsCompleted AS [SC_Orders.IsCompleted],
            T.IsPaid AS [SC_Orders.IsPaid],
            T.IsFailed AS [SC_Orders.IsFailed],
            T.IsRefund AS [SC_Orders.IsRefund],
            T.IsDispatched AS [SC_Orders.IsDispatched],
            T.IsReturned AS [SC_Orders.IsReturned],
            T.ReceiptHTML AS [SC_Orders.ReceiptHTML],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_Orders AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_ProductDownloads.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView57()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_ProductDownloads
        [ShoppingCartModel.SC_ProductDownloads](T1.[SC_ProductDownloads.ProductDownloadID], T1.[SC_ProductDownloads.ProductID], T1.[SC_ProductDownloads.Title], T1.[SC_ProductDownloads.Description], T1.[SC_ProductDownloads.Hide], T1.[SC_ProductDownloads.DisableDownloadAfterDays], T1.[SC_ProductDownloads.MaxDownloadsAllowed], T1.[SC_ProductDownloads.DownloadURL], T1.[SC_ProductDownloads.WebDownloadURL], T1.[SC_ProductDownloads.UseWebDownloadURL])
    FROM (
        SELECT
            T.ProductDownloadID AS [SC_ProductDownloads.ProductDownloadID],
            T.ProductID AS [SC_ProductDownloads.ProductID],
            T.Title AS [SC_ProductDownloads.Title],
            T.Description AS [SC_ProductDownloads.Description],
            T.Hide AS [SC_ProductDownloads.Hide],
            T.DisableDownloadAfterDays AS [SC_ProductDownloads.DisableDownloadAfterDays],
            T.MaxDownloadsAllowed AS [SC_ProductDownloads.MaxDownloadsAllowed],
            T.DownloadURL AS [SC_ProductDownloads.DownloadURL],
            T.WebDownloadURL AS [SC_ProductDownloads.WebDownloadURL],
            T.UseWebDownloadURL AS [SC_ProductDownloads.UseWebDownloadURL],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_ProductDownloads AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_ProductIcons.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView58()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_ProductIcons
        [ShoppingCartModel.SC_ProductIcons](T1.[SC_ProductIcons.ProductIconID], T1.[SC_ProductIcons.ProductID], T1.[SC_ProductIcons.IconID])
    FROM (
        SELECT
            T.ProductIconID AS [SC_ProductIcons.ProductIconID],
            T.ProductID AS [SC_ProductIcons.ProductID],
            T.IconID AS [SC_ProductIcons.IconID],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_ProductIcons AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_ProductImages.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView59()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_ProductImages
        [ShoppingCartModel.SC_ProductImages](T1.[SC_ProductImages.ProductImageID], T1.[SC_ProductImages.ProductID], T1.[SC_ProductImages.ImageURL], T1.[SC_ProductImages.ImageThumbURL], T1.[SC_ProductImages.WebImageURL], T1.[SC_ProductImages.WebThumbImageURL], T1.[SC_ProductImages.AlternateText], T1.[SC_ProductImages.Hide], T1.[SC_ProductImages.ShowWebImage])
    FROM (
        SELECT
            T.ProductImageID AS [SC_ProductImages.ProductImageID],
            T.ProductID AS [SC_ProductImages.ProductID],
            T.ImageURL AS [SC_ProductImages.ImageURL],
            T.ImageThumbURL AS [SC_ProductImages.ImageThumbURL],
            T.WebImageURL AS [SC_ProductImages.WebImageURL],
            T.WebThumbImageURL AS [SC_ProductImages.WebThumbImageURL],
            T.AlternateText AS [SC_ProductImages.AlternateText],
            T.Hide AS [SC_ProductImages.Hide],
            T.ShowWebImage AS [SC_ProductImages.ShowWebImage],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_ProductImages AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_ProductLocks.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView60()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_ProductLocks
        [ShoppingCartModel.SC_ProductLocks](T1.[SC_ProductLocks.ProductLockID], T1.[SC_ProductLocks.ProductID], T1.[SC_ProductLocks.Quantity], T1.[SC_ProductLocks.Username], T1.[SC_ProductLocks.AnonymousUserID], T1.[SC_ProductLocks.Timeout])
    FROM (
        SELECT
            T.ProductLockID AS [SC_ProductLocks.ProductLockID],
            T.ProductID AS [SC_ProductLocks.ProductID],
            T.Quantity AS [SC_ProductLocks.Quantity],
            T.Username AS [SC_ProductLocks.Username],
            T.AnonymousUserID AS [SC_ProductLocks.AnonymousUserID],
            T.Timeout AS [SC_ProductLocks.Timeout],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_ProductLocks AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_ProductModels.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView61()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_ProductModels
        [ShoppingCartModel.SC_ProductModels](T1.[SC_ProductModels.ProductModelID], T1.[SC_ProductModels.Title], T1.[SC_ProductModels.Description], T1.[SC_ProductModels.Hide], T1.[SC_ProductModels.SectionID], T1.[SC_ProductModels.CategoryID], T1.[SC_ProductModels.SubCategoryID])
    FROM (
        SELECT
            T.ProductModelID AS [SC_ProductModels.ProductModelID],
            T.Title AS [SC_ProductModels.Title],
            T.Description AS [SC_ProductModels.Description],
            T.Hide AS [SC_ProductModels.Hide],
            T.SectionID AS [SC_ProductModels.SectionID],
            T.CategoryID AS [SC_ProductModels.CategoryID],
            T.SubCategoryID AS [SC_ProductModels.SubCategoryID],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_ProductModels AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_Products.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView62()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Products
        [ShoppingCartModel.SC_Products](T1.[SC_Products.ProductID], T1.[SC_Products.Title], T1.[SC_Products.SubTitle], T1.[SC_Products.Description], T1.[SC_Products.CostPrice], T1.[SC_Products.Price], T1.[SC_Products.AvailableQuantity], T1.[SC_Products.IsPriceOnRequest], T1.[SC_Products.HasDiscount], T1.[SC_Products.DiscountPercentage], T1.[SC_Products.DiscountAmount], T1.[SC_Products.IsDiscountRangeEnabled], T1.[SC_Products.PriceDescription], T1.[SC_Products.SpecialOffer], T1.[SC_Products.Details], T1.[SC_Products.PreOderFlag], T1.[SC_Products.PreOrderDescription], T1.[SC_Products.PreOrderReleaseDate], T1.[SC_Products.RemovePreOrderOnDate], T1.[SC_Products.SectionID], T1.[SC_Products.CategoryID], T1.[SC_Products.SubCategoryID], T1.[SC_Products.ProductModelID], T1.[SC_Products.ProductTypeID], T1.[SC_Products.AvailabilityTypeID], T1.[SC_Products.BrandID], T1.[SC_Products.UnitID], T1.[SC_Products.SizeID], T1.[SC_Products.ColorID], T1.[SC_Products.Hide], T1.[SC_Products.Model], T1.[SC_Products.Manufacturer], T1.[SC_Products.ItemNumber], T1.[SC_Products.MaxOQ], T1.[SC_Products.MinOQ], T1.[SC_Products.Tags], T1.[SC_Products.Likes], T1.[SC_Products.UploadedOn], T1.[SC_Products.ShowInCart], T1.[SC_Products.SoldOutCount], T1.[SC_Products.Barcode], T1.[SC_Products.IsDownloadable], T1.[SC_Products.StringField1], T1.[SC_Products.StringField2], T1.[SC_Products.StringField3], T1.[SC_Products.FloatField1], T1.[SC_Products.FloatField2], T1.[SC_Products.FloatField3], T1.[SC_Products.IntField1], T1.[SC_Products.IntField2], T1.[SC_Products.IntField3])
    FROM (
        SELECT
            T.ProductID AS [SC_Products.ProductID],
            T.Title AS [SC_Products.Title],
            T.SubTitle AS [SC_Products.SubTitle],
            T.Description AS [SC_Products.Description],
            T.CostPrice AS [SC_Products.CostPrice],
            T.Price AS [SC_Products.Price],
            T.AvailableQuantity AS [SC_Products.AvailableQuantity],
            T.IsPriceOnRequest AS [SC_Products.IsPriceOnRequest],
            T.HasDiscount AS [SC_Products.HasDiscount],
            T.DiscountPercentage AS [SC_Products.DiscountPercentage],
            T.DiscountAmount AS [SC_Products.DiscountAmount],
            T.IsDiscountRangeEnabled AS [SC_Products.IsDiscountRangeEnabled],
            T.PriceDescription AS [SC_Products.PriceDescription],
            T.SpecialOffer AS [SC_Products.SpecialOffer],
            T.Details AS [SC_Products.Details],
            T.PreOderFlag AS [SC_Products.PreOderFlag],
            T.PreOrderDescription AS [SC_Products.PreOrderDescription],
            T.PreOrderReleaseDate AS [SC_Products.PreOrderReleaseDate],
            T.RemovePreOrderOnDate AS [SC_Products.RemovePreOrderOnDate],
            T.SectionID AS [SC_Products.SectionID],
            T.CategoryID AS [SC_Products.CategoryID],
            T.SubCategoryID AS [SC_Products.SubCategoryID],
            T.ProductModelID AS [SC_Products.ProductModelID],
            T.ProductTypeID AS [SC_Products.ProductTypeID],
            T.AvailabilityTypeID AS [SC_Products.AvailabilityTypeID],
            T.BrandID AS [SC_Products.BrandID],
            T.UnitID AS [SC_Products.UnitID],
            T.SizeID AS [SC_Products.SizeID],
            T.ColorID AS [SC_Products.ColorID],
            T.Hide AS [SC_Products.Hide],
            T.Model AS [SC_Products.Model],
            T.Manufacturer AS [SC_Products.Manufacturer],
            T.ItemNumber AS [SC_Products.ItemNumber],
            T.MaxOQ AS [SC_Products.MaxOQ],
            T.MinOQ AS [SC_Products.MinOQ],
            T.Tags AS [SC_Products.Tags],
            T.Likes AS [SC_Products.Likes],
            T.UploadedOn AS [SC_Products.UploadedOn],
            T.ShowInCart AS [SC_Products.ShowInCart],
            T.SoldOutCount AS [SC_Products.SoldOutCount],
            T.Barcode AS [SC_Products.Barcode],
            T.IsDownloadable AS [SC_Products.IsDownloadable],
            T.StringField1 AS [SC_Products.StringField1],
            T.StringField2 AS [SC_Products.StringField2],
            T.StringField3 AS [SC_Products.StringField3],
            T.FloatField1 AS [SC_Products.FloatField1],
            T.FloatField2 AS [SC_Products.FloatField2],
            T.FloatField3 AS [SC_Products.FloatField3],
            T.IntField1 AS [SC_Products.IntField1],
            T.IntField2 AS [SC_Products.IntField2],
            T.IntField3 AS [SC_Products.IntField3],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_Products AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_ProductTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView63()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_ProductTypes
        [ShoppingCartModel.SC_ProductTypes](T1.[SC_ProductTypes.ProductTypeID], T1.[SC_ProductTypes.Title], T1.[SC_ProductTypes.Description], T1.[SC_ProductTypes.Hide], T1.[SC_ProductTypes.SectionID], T1.[SC_ProductTypes.CategoryID], T1.[SC_ProductTypes.SubCategoryID])
    FROM (
        SELECT
            T.ProductTypeID AS [SC_ProductTypes.ProductTypeID],
            T.Title AS [SC_ProductTypes.Title],
            T.Description AS [SC_ProductTypes.Description],
            T.Hide AS [SC_ProductTypes.Hide],
            T.SectionID AS [SC_ProductTypes.SectionID],
            T.CategoryID AS [SC_ProductTypes.CategoryID],
            T.SubCategoryID AS [SC_ProductTypes.SubCategoryID],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_ProductTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_ProductVideos.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView64()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_ProductVideos
        [ShoppingCartModel.SC_ProductVideos](T1.[SC_ProductVideos.ProductVideoID], T1.[SC_ProductVideos.ProductID], T1.[SC_ProductVideos.YouTubeVideoURL], T1.[SC_ProductVideos.OtherVideoURL], T1.[SC_ProductVideos.VideoURL], T1.[SC_ProductVideos.Title], T1.[SC_ProductVideos.Description], T1.[SC_ProductVideos.ShowYouTubeVideo], T1.[SC_ProductVideos.ShowOtherVideo], T1.[SC_ProductVideos.ShowLocalVideo], T1.[SC_ProductVideos.Hide])
    FROM (
        SELECT
            T.ProductVideoID AS [SC_ProductVideos.ProductVideoID],
            T.ProductID AS [SC_ProductVideos.ProductID],
            T.YouTubeVideoURL AS [SC_ProductVideos.YouTubeVideoURL],
            T.OtherVideoURL AS [SC_ProductVideos.OtherVideoURL],
            T.VideoURL AS [SC_ProductVideos.VideoURL],
            T.Title AS [SC_ProductVideos.Title],
            T.Description AS [SC_ProductVideos.Description],
            T.ShowYouTubeVideo AS [SC_ProductVideos.ShowYouTubeVideo],
            T.ShowOtherVideo AS [SC_ProductVideos.ShowOtherVideo],
            T.ShowLocalVideo AS [SC_ProductVideos.ShowLocalVideo],
            T.Hide AS [SC_ProductVideos.Hide],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_ProductVideos AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_Ratings.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView65()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Ratings
        [ShoppingCartModel.SC_Ratings](T1.[SC_Ratings.RatingID], T1.[SC_Ratings.ProductID], T1.[SC_Ratings.Rating])
    FROM (
        SELECT
            T.RatingID AS [SC_Ratings.RatingID],
            T.ProductID AS [SC_Ratings.ProductID],
            T.Rating AS [SC_Ratings.Rating],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_Ratings AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_Reviews.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView66()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Reviews
        [ShoppingCartModel.SC_Reviews](T1.[SC_Reviews.ReviewID], T1.[SC_Reviews.ProductID], T1.[SC_Reviews.DateTime], T1.[SC_Reviews.Username], T1.[SC_Reviews.Review], T1.[SC_Reviews.Approved], T1.[SC_Reviews.Hide], T1.[SC_Reviews.RatingID])
    FROM (
        SELECT
            T.ReviewID AS [SC_Reviews.ReviewID],
            T.ProductID AS [SC_Reviews.ProductID],
            T.DateTime AS [SC_Reviews.DateTime],
            T.Username AS [SC_Reviews.Username],
            T.Review AS [SC_Reviews.Review],
            T.Approved AS [SC_Reviews.Approved],
            T.Hide AS [SC_Reviews.Hide],
            T.RatingID AS [SC_Reviews.RatingID],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_Reviews AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_Sections.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView67()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Sections
        [ShoppingCartModel.SC_Sections](T1.[SC_Sections.SectionID], T1.[SC_Sections.Title], T1.[SC_Sections.Description], T1.[SC_Sections.ImageURL], T1.[SC_Sections.ImageThumbURL], T1.[SC_Sections.AlternateText], T1.[SC_Sections.Hide])
    FROM (
        SELECT
            T.SectionID AS [SC_Sections.SectionID],
            T.Title AS [SC_Sections.Title],
            T.Description AS [SC_Sections.Description],
            T.ImageURL AS [SC_Sections.ImageURL],
            T.ImageThumbURL AS [SC_Sections.ImageThumbURL],
            T.AlternateText AS [SC_Sections.AlternateText],
            T.Hide AS [SC_Sections.Hide],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_Sections AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_ShipmentCompanies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView68()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_ShipmentCompanies
        [ShoppingCartModel.SC_ShipmentCompanies](T1.[SC_ShipmentCompanies.ShipmentCompanyID], T1.[SC_ShipmentCompanies.Title], T1.[SC_ShipmentCompanies.Description], T1.[SC_ShipmentCompanies.ImageURL], T1.[SC_ShipmentCompanies.ImageThumbURL], T1.[SC_ShipmentCompanies.AlternateText], T1.[SC_ShipmentCompanies.Hide])
    FROM (
        SELECT
            T.ShipmentCompanyID AS [SC_ShipmentCompanies.ShipmentCompanyID],
            T.Title AS [SC_ShipmentCompanies.Title],
            T.Description AS [SC_ShipmentCompanies.Description],
            T.ImageURL AS [SC_ShipmentCompanies.ImageURL],
            T.ImageThumbURL AS [SC_ShipmentCompanies.ImageThumbURL],
            T.AlternateText AS [SC_ShipmentCompanies.AlternateText],
            T.Hide AS [SC_ShipmentCompanies.Hide],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_ShipmentCompanies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_ShipmentTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView69()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_ShipmentTypes
        [ShoppingCartModel.SC_ShipmentTypes](T1.[SC_ShipmentTypes.ShipmentTypeID], T1.[SC_ShipmentTypes.Title], T1.[SC_ShipmentTypes.Description], T1.[SC_ShipmentTypes.Hide])
    FROM (
        SELECT
            T.ShipmentTypeID AS [SC_ShipmentTypes.ShipmentTypeID],
            T.Title AS [SC_ShipmentTypes.Title],
            T.Description AS [SC_ShipmentTypes.Description],
            T.Hide AS [SC_ShipmentTypes.Hide],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_ShipmentTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_Sizes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView70()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Sizes
        [ShoppingCartModel.SC_Sizes](T1.[SC_Sizes.SizeID], T1.[SC_Sizes.Title], T1.[SC_Sizes.Description], T1.[SC_Sizes.SectionID], T1.[SC_Sizes.CategoryID], T1.[SC_Sizes.SubCategoryID])
    FROM (
        SELECT
            T.SizeID AS [SC_Sizes.SizeID],
            T.Title AS [SC_Sizes.Title],
            T.Description AS [SC_Sizes.Description],
            T.SectionID AS [SC_Sizes.SectionID],
            T.CategoryID AS [SC_Sizes.CategoryID],
            T.SubCategoryID AS [SC_Sizes.SubCategoryID],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_Sizes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_SubCategories.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView71()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_SubCategories
        [ShoppingCartModel.SC_SubCategories](T1.[SC_SubCategories.SubCategoryID], T1.[SC_SubCategories.Title], T1.[SC_SubCategories.Description], T1.[SC_SubCategories.ImageURL], T1.[SC_SubCategories.ImageThumbURL], T1.[SC_SubCategories.AlternateText], T1.[SC_SubCategories.CategoryID], T1.[SC_SubCategories.Hide])
    FROM (
        SELECT
            T.SubCategoryID AS [SC_SubCategories.SubCategoryID],
            T.Title AS [SC_SubCategories.Title],
            T.Description AS [SC_SubCategories.Description],
            T.ImageURL AS [SC_SubCategories.ImageURL],
            T.ImageThumbURL AS [SC_SubCategories.ImageThumbURL],
            T.AlternateText AS [SC_SubCategories.AlternateText],
            T.CategoryID AS [SC_SubCategories.CategoryID],
            T.Hide AS [SC_SubCategories.Hide],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_SubCategories AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_TempCart.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView72()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_TempCart
        [ShoppingCartModel.SC_TempCart](T1.[SC_TempCart.CartID], T1.[SC_TempCart.AnonymousUserID], T1.[SC_TempCart.ProductID], T1.[SC_TempCart.Quantity])
    FROM (
        SELECT
            T.CartID AS [SC_TempCart.CartID],
            T.AnonymousUserID AS [SC_TempCart.AnonymousUserID],
            T.ProductID AS [SC_TempCart.ProductID],
            T.Quantity AS [SC_TempCart.Quantity],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_TempCart AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_Trackings.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView73()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Trackings
        [ShoppingCartModel.SC_Trackings](T1.[SC_Trackings.TrackingID], T1.[SC_Trackings.Title])
    FROM (
        SELECT
            T.TrackingID AS [SC_Trackings.TrackingID],
            T.Title AS [SC_Trackings.Title],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_Trackings AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_Units.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView74()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_Units
        [ShoppingCartModel.SC_Units](T1.[SC_Units.UnitID], T1.[SC_Units.Title], T1.[SC_Units.Description], T1.[SC_Units.SectionID], T1.[SC_Units.CategoryID], T1.[SC_Units.SubCategoryID])
    FROM (
        SELECT
            T.UnitID AS [SC_Units.UnitID],
            T.Title AS [SC_Units.Title],
            T.Description AS [SC_Units.Description],
            T.SectionID AS [SC_Units.SectionID],
            T.CategoryID AS [SC_Units.CategoryID],
            T.SubCategoryID AS [SC_Units.SubCategoryID],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_Units AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_UserCardDetails.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView75()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_UserCardDetails
        [ShoppingCartModel.SC_UserCardDetails](T1.[SC_UserCardDetails.UserCardDetailsID], T1.[SC_UserCardDetails.Title], T1.[SC_UserCardDetails.Username], T1.[SC_UserCardDetails.NameOnCard], T1.[SC_UserCardDetails.CardTypeID], T1.[SC_UserCardDetails.CardNumber], T1.[SC_UserCardDetails.SecurityCode], T1.[SC_UserCardDetails.ValidFrom], T1.[SC_UserCardDetails.ValidTill])
    FROM (
        SELECT
            T.UserCardDetailsID AS [SC_UserCardDetails.UserCardDetailsID],
            T.Title AS [SC_UserCardDetails.Title],
            T.Username AS [SC_UserCardDetails.Username],
            T.NameOnCard AS [SC_UserCardDetails.NameOnCard],
            T.CardTypeID AS [SC_UserCardDetails.CardTypeID],
            T.CardNumber AS [SC_UserCardDetails.CardNumber],
            T.SecurityCode AS [SC_UserCardDetails.SecurityCode],
            T.ValidFrom AS [SC_UserCardDetails.ValidFrom],
            T.ValidTill AS [SC_UserCardDetails.ValidTill],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_UserCardDetails AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_UserCart.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView76()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_UserCart
        [ShoppingCartModel.SC_UserCart](T1.[SC_UserCart.CartID], T1.[SC_UserCart.Username], T1.[SC_UserCart.ProductID], T1.[SC_UserCart.Quantity])
    FROM (
        SELECT
            T.CartID AS [SC_UserCart.CartID],
            T.Username AS [SC_UserCart.Username],
            T.ProductID AS [SC_UserCart.ProductID],
            T.Quantity AS [SC_UserCart.Quantity],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_UserCart AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ShoppingCartEntities.SC_UserOrders.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView77()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing SC_UserOrders
        [ShoppingCartModel.SC_UserOrders](T1.[SC_UserOrders.UserOrderID], T1.[SC_UserOrders.Username], T1.[SC_UserOrders.OrderNumber])
    FROM (
        SELECT
            T.UserOrderID AS [SC_UserOrders.UserOrderID],
            T.Username AS [SC_UserOrders.Username],
            T.OrderNumber AS [SC_UserOrders.OrderNumber],
            True AS _from0
        FROM ShoppingCartModelStoreContainer.SC_UserOrders AS T
    ) AS T1");
        }
    }
}